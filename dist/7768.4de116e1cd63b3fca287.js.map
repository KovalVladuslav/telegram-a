{"version":3,"file":"7768.4de116e1cd63b3fca287.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/password.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumGiftModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/getSingularPaidMedia.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.module.scss?b340","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/FactCheck.module.scss?3842","webpack://telegram-t/./src/components/middle/message/FactCheck.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.module.scss?e3d6","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/common/reactions/PaidReactionEmoji.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/reactions/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.module.scss?30d0","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts","webpack://telegram-t/./src/components/common/Sparkles.module.scss?15c2","webpack://telegram-t/./src/components/common/Sparkles.tsx","webpack://telegram-t/./src/global/helpers/payments.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiPollResult, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: Number(threadId) });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    reactions.results = addPaidReaction(reactions.results, localPaidReaction.localAmount);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId!,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n          sendMessage(global, {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n\n          restAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          firstAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n\n          sendMessage(global, {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n        }\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n  isInvertedMedia?: true;\n  effectId?: string;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMedia, isFullscreen } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', {\n    chat, random: message.randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsoredMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportSponsoredMessage', { chat, randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    global = deleteSponsoredMessage(global, chatId);\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chat.id, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = result;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = resultsByType?.[type] || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectChat(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiChat;\n  chat?: ApiChat;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n}) {\n  const {\n    query = '', type, offsetRate, offsetId, offsetPeer, chat, maxDate, minDate, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (chat) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiChat, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = realChatId ? selectChat(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n  const offsetRate = results?.nextOffsetRate;\n  const offsetPeerId = results?.nextOffsetPeerId;\n  const offsetPeer = offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      chat,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery && currentSearch.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : chat.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    chat,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    onFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      loadAllChats({ listType: 'saved' });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type {\n  GlobalState, TabArgs, WebApp, WebAppModalStateType,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp <T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const key = webApp && getWebAppKey(webApp);\n  const originalWebApp = key ? openedWebApps[key] : undefined;\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webApp,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  const activeWebApp = currentTabState.webApps.activeWebApp;\n  const activeWebAppKey = activeWebApp && getWebAppKey(activeWebApp);\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...updatedWebAppKey === activeWebAppKey && {\n        activeWebApp: updatedValue,\n      },\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  const newActiveWebApp = openedWebApps[webAppKey];\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebApp: newActiveWebApp,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebApp: webApp },\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  if (!currentTabState.webApps.activeWebApp) return global;\n\n  return removeWebAppFromOpenList(global, currentTabState.webApps.activeWebApp, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, { ...webApp, isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = currentTabState.webApps.openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((key) => key !== removingWebAppKey);\n  }\n\n  const activeWebApp = currentTabState.webApps.activeWebApp;\n\n  const isRemovedAppActive = activeWebApp && (getWebAppKey(activeWebApp) === getWebAppKey(webApp));\n\n  const openedWebAppsValues = Object.values(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsValues.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebApp: openedWebAppsCount\n          ? openedWebAppsValues[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      ([url, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebApp: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = currentTabState.webApps.activeWebApp;\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  newActiveWebApp.isCloseModalOpen = true;\n\n  const key = getWebAppKey(newActiveWebApp);\n\n  if (key) webAppsNotAllowedToClose[key] = newActiveWebApp;\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => k in webAppsNotAllowedToClose);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebApp: newActiveWebApp,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs, WebApp,\n} from '../../types';\nimport {\n  type ApiChat, type ApiChatType, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser, updateManagementProgress, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList, clearOpenedWebApps, hasOpenedWebApps,\n  removeActiveWebAppFromOpenList, removeWebAppFromOpenList,\n  replaceInlineBotSettings, replaceInlineBotsIsLoading,\n  replaceIsWebAppModalOpen, replaceWebAppModalState, updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (webApp) {\n    global = getGlobal();\n    global = addWebAppToOpenList(global, webApp, true, true, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot!.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    peerId,\n    botId,\n    appName,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, webApp, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { webApp, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, webApp, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const newModalState = tabState.webApps.modalState === 'maximized' ? 'minimized' : 'maximized';\n  return replaceWebAppModalState(global, newModalState, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  const activeWebApp = tabState.webApps.activeWebApp;\n  if (!activeWebApp?.url) return undefined;\n\n  const updatedApp = {\n    ...activeWebApp,\n    slug: payload.slug,\n  };\n\n  return updateWebApp(global, updatedApp, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type { ApiInputInvoiceStars, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getPrizeStarsTransactionFromGiveaway,\n  getRequestInputInvoice,\n} from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions, closeInvoice,\n  openStarsTransactionFromReceipt,\n  openStarsTransactionModal,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsBalance,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectPeer,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const result = await getPaymentForm(global, requestInputInvoice, tabId);\n\n  if (!result) {\n    return;\n  }\n\n  const { form, invoice } = result;\n\n  global = getGlobal();\n\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updatePayment(global, {\n    inputInvoice: payload,\n    isPaymentModalOpen: form.type === 'regular',\n    isExtendedMedia: (payload as any).isExtendedMedia,\n    status: undefined,\n  }, tabId);\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      isStarPaymentModalOpen: true,\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const theme = extractCurrentThemeParams();\n  const result = await callApi('getPaymentForm', inputInvoice, theme);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    form, invoice,\n  } = result;\n\n  global = getGlobal();\n\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n\n  return { form, invoice };\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    inputInvoice,\n  });\n\n  if (inputInvoice.type === 'stars') {\n    actions.requestConfetti({ withStars: true, tabId });\n  }\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const starsPayment = selectTabState(global, tabId).isStarPaymentModalOpen;\n  if (!starsPayment) return;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId) as ApiInputInvoiceStars;\n  const formId = selectPaymentFormId(global, tabId);\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    inputInvoice,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.nativeParams?.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const isOpen = Boolean(chatId);\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftingModal: {\n      isOpen: true,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closePremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftingModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsGiftingModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    starsGiftingModal: {\n      isOpen: true,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeStarsGiftingModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openPremiumGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserIds, tabId = getCurrentTabId(),\n  } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftModal: {\n      isOpen: true,\n      forUserIds,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closePremiumGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n      subscriptions: undefined,\n    },\n  };\n\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextHistoryOffset);\n  }\n\n  if (status.subscriptions) {\n    global = appendStarsSubscriptions(global, status.subscriptions, status.nextSubscriptionOffset);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiError, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, isPrivate, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateMonetizationInfo,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { chat, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, currentPassword, onSuccess, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateMonetizationInfo(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('loadMonetizationRevenueWithdrawalUrl', { chat, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateMonetizationInfo(global, { isLoading: false });\n  setGlobal(global);\n\n  if (result) {\n    onSuccess();\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n  }\n});\n\naddActionHandler('clearMonetizationInfo', (global): ActionReturnType => {\n  return updateMonetizationInfo(global, { error: undefined });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = {\n    ...getGlobal(),\n    stories: {\n      ...getGlobal().stories,\n      byPeerId: {\n        ...getGlobal().stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  ActiveDownloads,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getSenderTitle,\n  isChatChannel,\n  isJoinedChannelMessage,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, scrollTargetPosition,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    message, isSchedule, album,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      isSchedule,\n      album,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearPayment, closeInvoice, openStarsTransactionModal, updatePayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n  const originPayment = starsBalanceModal?.originPayment;\n  const originReaction = starsBalanceModal?.originReaction;\n\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n    ...((originPayment || originReaction) && {\n      starsBalanceModal: undefined,\n    }),\n  }, tabId);\n\n  // Re-open previous payment modal\n  if (originPayment) {\n    global = updatePayment(global, originPayment, tabId);\n    global = updateTabState(global, {\n      isStarPaymentModalOpen: true,\n    }, tabId);\n  }\n\n  // Send reaction\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { originPayment, originReaction, tabId = getCurrentTabId() } = payload || {};\n\n  global = clearPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originPayment,\n      originReaction,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsBalanceModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('closeStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsTransactionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsSubscriptionModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && updatedChat && !selectIsChatListed(global, update.id)\n          && !updatedChat.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = updateChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n      });\n\n      if (hasMention) {\n        global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const { users, chats, threadInfos } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApps.activeWebApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeActiveWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.isPrivate,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePasswordError': {\n      return {\n        ...global,\n        monetizationInfo: {\n          ...global.monetizationInfo,\n          isLoading: false,\n          error: update.error,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { closeInvoice, updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice, invoice } = selectTabState(global, tabId).payment;\n\n        if (!areDeepEqual(inputInvoice, update.inputInvoice)) return;\n\n        if (invoice) {\n          const { amount, currency, title } = invoice;\n\n          if (currency !== STARS_CURRENCY_CODE) {\n            actions.showNotification({\n              tabId,\n              message: langProvider.oldTranslate('PaymentInfoHint', [\n                formatCurrencyAsString(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        if (inputInvoice?.type === 'giftcode') {\n          if (!inputInvoice.userIds) {\n            return;\n          }\n          const giftModalState = selectTabState(global, tabId).giftModal;\n\n          if (giftModalState && giftModalState.isOpen\n            && areDeepEqual(inputInvoice.userIds, giftModalState.forUserIds)) {\n            global = updateTabState(global, {\n              giftModal: {\n                ...giftModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n          }\n        }\n\n        if (inputInvoice?.type === 'starsgift') {\n          if (!inputInvoice.userId) {\n            return;\n          }\n          const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n          if (starsModalState && starsModalState.isOpen\n            && areDeepEqual(inputInvoice.userId, starsModalState.forUserId)) {\n            global = updateTabState(global, {\n              starsGiftModal: {\n                ...starsModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n          }\n        }\n\n        if (inputInvoice?.type === 'stars') {\n          const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n          if (starsModalState && starsModalState.isOpen) {\n            global = updateTabState(global, {\n              starsGiftModal: {\n                ...starsModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n          }\n\n          actions.loadStarStatus(); // Manually reload. Server update takes ~10 seconds\n        }\n\n        if (inputInvoice?.type === 'chatInviteSubscription') {\n          const { amount } = invoice!;\n          actions.showNotification({\n            tabId,\n            title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n            message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n              amount,\n              inputInvoice.inviteInfo.title,\n            ], undefined, amount),\n            icon: 'star',\n          });\n        }\n\n        if (invoice?.currency === STARS_CURRENCY_CODE) {\n          global = closeInvoice(global, tabId);\n        }\n        setGlobal(global);\n      });\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            fluid\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            fluid\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n      const newIndex = pinnedIndexAboveFocused !== -1 ? pinnedIndexAboveFocused : 0;\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: newIndex,\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: newIndex,\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumGiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumGiftModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumGiftModal = useModuleLoader(Bundles.Extra, 'PremiumGiftModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumGiftModal ? <PremiumGiftModal {...props} /> : undefined;\n};\n\nexport default PremiumGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"media\":\"zLLIV9Iw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useOldLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiPaidMedia } from '../../../../api/types';\n\nexport default function getSingularPaidMedia(media?: ApiPaidMedia) {\n  if (!media || media.extendedMedia.length !== 1) {\n    return {\n      photo: undefined,\n      video: undefined,\n    };\n  }\n\n  const singularMedia = media.extendedMedia[0];\n  const isPreview = 'mediaType' in singularMedia;\n  const photo = isPreview ? (!singularMedia.duration ? singularMedia : undefined) : singularMedia.photo;\n  const video = isPreview ? (singularMedia.duration ? singularMedia : undefined) : singularMedia.video;\n\n  return { photo, video };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { getMessageContent } from '../../../../global/helpers';\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isSingleMessage?: boolean, isMobile?: boolean) {\n  const isOutgoing = messages[0].isOutgoing;\n  const allMedia = (isSingleMessage\n    ? messages[0].content.paidMedia!.extendedMedia.map((media) => (\n      'mediaType' in media ? media : (media.photo || media.video)\n    ))\n    : messages.map((message) => (\n      getMessageContent(message).photo || getMessageContent(message).video\n    ))\n  ).filter(Boolean);\n  return allMedia.map(\n    (media) => {\n      const dimensions = calculateMediaDimensions({\n        media,\n        isOwn: isOutgoing,\n        isMobile,\n      }) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, album.isPaidMedia, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useOldLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps<T> =\n  (PhotoProps<T> | VideoProps<T>) & {\n    clickArg: number;\n    noSelectControls?: boolean;\n  };\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  // eslint-disable-next-line @typescript-eslint/comma-dangle\n  const ComponentWithSelectControl = <T,>(props: OwnProps<T> & StateProps) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      dimensions,\n      clickArg,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: clickArg, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps<unknown>>(\n    (global, ownProps) => {\n      const { clickArg, noSelectControls } = ownProps;\n      return {\n        isInSelectMode: !noSelectControls && selectIsInSelectMode(global),\n        isSelected: !noSelectControls && selectIsMessageSelected(global, clickArg),\n      };\n    },\n  )(ComponentWithSelectControl)) as typeof ComponentWithSelectControl;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport {\n  getIsDownloading, getMessageContent, getMessageHtmlId, getMessagePhoto,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number, index?: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloads,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const { content: { paidMedia } } = album.mainMessage;\n\n  const mediaCount = album.isPaidMedia ? paidMedia!.extendedMedia.length : album.messages.length;\n\n  const handlePaidMediaClick = useLastCallback((index: number) => {\n    onMediaClick(album.mainMessage.id, index);\n  });\n\n  const handleAlbumMessageClick = useLastCallback((messageId: number) => {\n    onMediaClick(messageId);\n  });\n\n  const handleCancelUpload = useLastCallback((messageId: number) => {\n    cancelUploadMedia({ chatId: album.mainMessage.chatId, messageId });\n  });\n\n  const messages = useMemo(() => {\n    if (album.isPaidMedia) {\n      return album.mainMessage.content.paidMedia!.extendedMedia.map(() => album.mainMessage);\n    }\n\n    return album.messages;\n  }, [album]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const renderingPaidMedia = album.isPaidMedia ? message.content.paidMedia?.extendedMedia[index] : undefined;\n    const paidPhotoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.photo;\n    const paidVideoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.video;\n    const photo = paidPhotoOrPreview || getMessagePhoto(message);\n    const video = paidVideoOrPreview || getMessageContent(message).video;\n\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id, album.isPaidMedia ? index : undefined)}`}\n          photo={photo}\n          isOwn={isOwn}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={photo.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, photo)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          video={video}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={video.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, video)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global);\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloads,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useOldLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiPeerColor } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getApiPeerColorClass, getPeerColorClass } from './helpers/peerColor';\n\nimport EmojiIconBackground from './embedded/EmojiIconBackground';\n\nimport styles from './PeerColorWrapper.module.scss';\n\ninterface OwnProps extends React.HTMLAttributes<HTMLDivElement> {\n  peer?: ApiPeer;\n  peerColor?: ApiPeerColor;\n  noUserColors?: boolean;\n  shoudReset?: boolean;\n  className?: string;\n  emojiIconClassName?: string;\n  children: React.ReactNode;\n}\n\nfunction PeerColorWrapper({\n  peer, peerColor, noUserColors, shoudReset, className, emojiIconClassName, children, ...otherProps\n}: OwnProps) {\n  const color = peerColor || peer?.color;\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        peer && getPeerColorClass(peer, noUserColors, shoudReset),\n        peerColor && getApiPeerColorClass(peerColor),\n        className,\n      )}\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...otherProps}\n    >\n      {color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          className={emojiIconClassName}\n          emojiDocumentId={color.backgroundEmojiId}\n        />\n      )}\n      {children}\n    </div>\n  );\n}\n\nexport default memo(PeerColorWrapper);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nRjVJOQv\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useOldLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"large\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): StateProps => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HMB5LgeX\",\"title\":\"vZnCPl3t\",\"content\":\"k_dGolcu\",\"separator\":\"qRaSs5iA\",\"footnote\":\"EDmr0wJG\",\"collapsed\":\"hYzpXwTM\",\"cutoutWrapper\":\"nfCzKu78\",\"collapseIcon\":\"mxPizZpR\",\"clickable\":\"Cj2cLczd\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiFactCheck } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useCollapsibleLines from '../../../hooks/element/useCollapsibleLines';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Separator from '../../ui/Separator';\n\nimport styles from './FactCheck.module.scss';\n\ntype OwnProps = {\n  factCheck: ApiFactCheck;\n  isToggleDisabled?: boolean;\n};\n\nconst COLOR = {\n  color: 0,\n};\nconst MAX_LINES = 4;\n\nconst FactCheck = ({ factCheck, isToggleDisabled }: OwnProps) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const cutoutRef = useRef<HTMLDivElement>(null);\n  const {\n    isCollapsed, isCollapsible, setIsCollapsed,\n  } = useCollapsibleLines(ref, MAX_LINES, cutoutRef);\n\n  const countryLocalized = useMemo(() => {\n    if (!factCheck.countryCode || !lang.code) return undefined;\n\n    const displayNames = new Intl.DisplayNames([lang.code], { type: 'region' });\n    return displayNames.of(factCheck.countryCode);\n  }, [factCheck.countryCode, lang.code]);\n\n  const canExpand = !isToggleDisabled && isCollapsed;\n\n  const handleExpand = useLastCallback(() => {\n    setIsCollapsed(false);\n  });\n\n  const handleToggle = useLastCallback(() => {\n    setIsCollapsed((prev) => !prev);\n  });\n\n  if (!factCheck.text) {\n    return undefined;\n  }\n\n  return (\n    <PeerColorWrapper peerColor={COLOR} className={styles.root} onClick={canExpand ? handleExpand : undefined}>\n      <div\n        ref={cutoutRef}\n        className={buildClassName(styles.cutoutWrapper, isCollapsed && styles.collapsed)}\n      >\n        <div className={styles.title}>{lang('FactCheck')}</div>\n        <div ref={ref} className={styles.content}>\n          {renderTextWithEntities({\n            text: factCheck.text.text,\n            entities: factCheck.text.entities,\n          })}\n        </div>\n        <Separator className={styles.separator} />\n        <div className={styles.footnote}>{lang('FactCheckFooter', countryLocalized)}</div>\n      </div>\n      {isCollapsible && (\n        <div\n          className={buildClassName(styles.collapseIcon, !isToggleDisabled && styles.clickable)}\n          onClick={!isToggleDisabled ? handleToggle : undefined}\n          aria-hidden\n        >\n          <Icon name={isCollapsed ? 'down' : 'up'} />\n        </div>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(FactCheck);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      chatId: message.chatId,\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isOwnMessage,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useOldLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription, stars,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {message?.content?.giveaway?.stars ? (\n              <>\n                {renderText(\n                  lang('Chat.Giveaway.Message.Stars.PrizeText', lang('Stars', message?.content?.giveaway?.stars)),\n                  ['simple_markdown'],\n                )}\n                <br />\n                {renderText(lang('AmongWinners', quantity), ['simple_markdown'])}\n              </>\n            ) : (\n              <>\n                {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n                <br />\n                {renderText(lang(\n                  'ActionGiftPremiumSubtitle',\n                  lang('Chat.Giveaway.Info.Months', months),\n                ), ['simple_markdown'])}\n              </>\n            )}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const giveawayDuration = isResultsInfo ? lang('Chat.Giveaway.Info.Months', months) : lang('Stars', stars, 'i');\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, giveawayDuration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\nimport type { ActionPayloads } from '../../../global/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: (payload: ActionPayloads['clickBotInlineButton']) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useOldLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <Icon className=\"corner-icon\" name=\"card\" />;\n      case 'switchBotInline':\n        return <Icon className=\"corner-icon\" name=\"share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <Icon className=\"corner-icon\" name=\"webapp\" />;\n    }\n    return undefined;\n  };\n\n  const buttonTexts = useMemo(() => {\n    const texts: TeactNode[][] = [];\n    message.inlineButtons!.forEach((row) => {\n      texts.push(row.map((button) => renderKeyboardButtonText(lang, button)));\n    });\n    return texts;\n  }, [lang, message.inlineButtons]);\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row, i) => (\n        <div className=\"row\">\n          {row.map((button, j) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ chatId: message.chatId, messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">\n                {buttonTexts[i][j]}\n              </span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(InlineButtons);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(photoUrl, !withBlurredBackground);\n  const messageId = message.id;\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, messageId, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme, messageId]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code, { iconClassName: 'invoice-currency-icon' })}\n          {isTest && <span className=\"test-invoice\">{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrencyAsString(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dates/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { mediaType, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (mediaType === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = mediaType === 'venue' || (mediaType === 'geoLive' && !isExpired);\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, dpr);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePreviousDeprecated(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (mediaType !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [mediaType, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (mediaType !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (mediaType === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (mediaType === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      mediaType,\n      isExpired && 'expired',\n    );\n    if (mediaType === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (mediaType === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/dates/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  effectEmoji?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onEffectClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  effectEmoji,\n  onClick,\n  onTranslationClick,\n  onEffectClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        lang.code,\n        undefined,\n        lang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const date = useMemo(() => {\n    const time = formatTime(lang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(lang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [lang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {effectEmoji && (\n        <span className=\"message-effect-icon\" onClick={onEffectClick}>\n          {renderText(effectEmoji)}\n        </span>\n      )}\n      {isTranslated && (\n        <Icon name=\"language\" className=\"message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <Icon name=\"channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <Icon name=\"reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <Icon name=\"pinned-message\" className=\"message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dates/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useOldLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mVaSjZRJ\",\"buyButton\":\"GnKGu6D9\",\"boughtStatus\":\"IGXW5hWr\",\"star\":\"ywiOugiH\",\"buttonText\":\"gLaaVQXr\"};","import React, { memo, type TeactNode, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPaidMedia } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, STARS_ICON_PLACEHOLDER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { replaceWithTeact } from '../../../util/replaceWithTeact';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './PaidMediaOverlay.module.scss';\n\ntype OwnProps = {\n  paidMedia: ApiPaidMedia;\n  chatId: string;\n  messageId: number;\n  isOutgoing?: boolean;\n  children?: TeactNode;\n};\n\nconst PaidMediaOverlay = ({\n  paidMedia,\n  chatId,\n  messageId,\n  isOutgoing,\n  children,\n}: OwnProps) => {\n  const { openInvoice } = getActions();\n  const lang = useOldLang();\n\n  const isClickable = !paidMedia.isBought;\n\n  const buttonText = useMemo(() => {\n    const value = lang('UnlockPaidContent', paidMedia.starsAmount);\n\n    return replaceWithTeact(\n      value, STARS_ICON_PLACEHOLDER, <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />,\n    );\n  }, [lang, paidMedia]);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId,\n    });\n    stopEvent(e);\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={isClickable ? handleClick : undefined}\n    >\n      {children}\n      {isClickable && (\n        <Button\n          className={styles.buyButton}\n          color=\"dark\"\n          size=\"tiny\"\n          fluid\n          pill\n        >\n          <span className={styles.buttonText}>{buttonText}</span>\n        </Button>\n      )}\n      {paidMedia.isBought && (\n        <div className={buildClassName('message-paid-media-status', styles.boughtStatus)}>\n          {isOutgoing ? formatCurrency(paidMedia.starsAmount, STARS_CURRENCY_CODE) : lang('Chat.PaidMedia.Purchased')}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(PaidMediaOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: answer.text.text,\n            entities: answer.text.entities,\n          })}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { LangFn } from '../../../hooks/useOldLang';\n\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: renderTextWithEntities({\n      text: a.text.text,\n      entities: a.text.entities,\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    }),\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [\n    closePeriod, observeIntersectionForLoading, observeIntersectionForPlaying,\n    summary.answers, summary.closePeriod, summary.quiz,\n  ]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useOldLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          <AvatarList\n            size=\"micro\"\n            peers={recentVoters}\n          />\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n          observeIntersectionForLoading,\n          observeIntersectionForPlaying,\n        })}\n      </div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                isRound\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiReaction, ApiReactionPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectPerformanceSettingsValue, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID, IS_IOS } from '../../../util/windowEnvironment';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport AnimatedIcon from '../AnimatedIcon';\nimport StarIcon from '../icons/StarIcon';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  containerId: string;\n  reaction: ApiReactionPaid;\n  className?: string;\n  size?: number;\n  effectSize?: number;\n  localAmount?: number;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  activeReactions?: ApiReaction[];\n  withEffects?: boolean;\n};\n\nconst ICON_SIZE = 1.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\nconst MAX_EFFECT_COUNT = (IS_IOS || IS_ANDROID) ? 2 : 5;\nconst QUALITY = (IS_IOS || IS_ANDROID) ? 2 : 3;\n\nconst PaidReactionEmoji = ({\n  containerId,\n  reaction,\n  className,\n  size = ICON_SIZE,\n  effectSize = EFFECT_SIZE,\n  activeReactions,\n  localAmount,\n  withEffects,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const effectRef = useRef<HTMLDivElement>(null);\n\n  const [effectsIds, setEffectsIds] = useState<number[]>([]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlayEffect = Boolean(\n    withEffects && activeReaction,\n  );\n  const canAddMoreEffects = effectsIds.length < MAX_EFFECT_COUNT;\n\n  useEffectWithPrevDeps(([prevLocalAmount]) => {\n    if (!shouldPlayEffect) {\n      setEffectsIds([]);\n      return;\n    }\n\n    if (!localAmount || localAmount <= (prevLocalAmount || 0)) {\n      return;\n    }\n\n    if (canAddMoreEffects) {\n      setEffectsIds((prev) => [...prev, Date.now()]);\n    }\n  }, [localAmount, canAddMoreEffects, shouldPlayEffect]);\n\n  const {\n    shouldRender: shouldRenderEffect,\n  } = useShowTransition({\n    ref: effectRef,\n    noMountTransition: true,\n    isOpen: shouldPlayEffect,\n    className: 'slow',\n    withShouldRender: true,\n  });\n\n  const handleEnded = useLastCallback(() => {\n    const newEffectsIds = effectsIds.slice(1);\n    setEffectsIds(newEffectsIds);\n    if (!newEffectsIds.length) {\n      stopActiveReaction({ containerId, reaction });\n    }\n  });\n\n  const rootClassName = buildClassName(\n    styles.root,\n    shouldRenderEffect && styles.animating,\n    className,\n  );\n\n  return (\n    <div className={rootClassName} ref={ref} teactFastList>\n      <StarIcon key=\"icon\" type=\"gold\" size=\"adaptive\" style={`width: ${size}px; height: ${size}px`} />\n      {shouldRenderEffect && effectsIds.map((id) => (\n        <AnimatedIcon\n          key={id}\n          ref={effectRef}\n          className={styles.effect}\n          size={effectSize}\n          tgsUrl={LOCAL_TGS_URLS.StarReactionEffect}\n          play={isIntersecting}\n          noLoop\n          nonInteractive\n          quality={QUALITY}\n          onEnded={handleEnded}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { containerId }) => {\n    const { activeReactions } = selectTabState(global);\n\n    const withEffects = selectPerformanceSettingsValue(global, 'reactionEffects');\n\n    return {\n      activeReactions: activeReactions?.[containerId],\n      withEffects,\n    };\n  },\n)(PaidReactionEmoji));\n","import React, { memo, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer, ApiReaction, ApiReactionCount,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { isReactionChosen } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useContextMenuHandlers from '../../../../hooks/useContextMenuHandlers';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useShowTransition from '../../../../hooks/useShowTransition';\n\nimport AnimatedCounter from '../../../common/AnimatedCounter';\nimport AvatarList from '../../../common/AvatarList';\nimport PaidReactionEmoji from '../../../common/reactions/PaidReactionEmoji';\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport Sparkles from '../../../common/Sparkles';\nimport Button from '../../../ui/Button';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\nconst MAX_SCALE = 3;\n\ntype OwnProps = {\n  chatId: string;\n  messageId: number;\n  reaction: ApiReactionCount;\n  containerId: string;\n  isOwnMessage?: boolean;\n  recentReactors?: ApiPeer[];\n  className?: string;\n  chosenClassName?: string;\n  availableStars?: number;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n  onPaidClick?: (count: number) => void;\n};\n\nfunction selectAreStarsLoaded(global: GlobalState) {\n  return Boolean(global.stars);\n}\n\nconst ReactionButton = ({\n  reaction,\n  containerId,\n  isOwnMessage,\n  recentReactors,\n  className,\n  chosenClassName,\n  availableStars,\n  chatId,\n  messageId,\n  observeIntersection,\n  onClick,\n  onPaidClick,\n}: OwnProps) => {\n  const { openStarsBalanceModal, resetLocalPaidReactions, openPaidReactionModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLButtonElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const counterRef = useRef<HTMLSpanElement>(null);\n  const animationRef = useRef<Animation>();\n\n  const isPaid = reaction.reaction.type === 'paid';\n\n  const areStarsLoaded = useSelector(selectAreStarsLoaded);\n\n  const handlePaidClick = useLastCallback((count = 1) => {\n    onPaidClick?.(count);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if (reaction.reaction.type === 'paid') {\n      e.stopPropagation(); // Prevent default message double click behavior\n      handlePaidClick();\n      return;\n    }\n\n    onClick?.(reaction.reaction);\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      openPaidReactionModal({\n        chatId,\n        messageId,\n      });\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, handleContextMenuHide, isContextMenuOpen, chatId, messageId]);\n\n  useEffectWithPrevDeps(([prevReaction]) => {\n    const amount = reaction.localAmount;\n    const button = ref.current;\n    if (!amount || !button || amount === prevReaction?.localAmount) return;\n\n    if (areStarsLoaded && (!availableStars || amount > availableStars)) {\n      openStarsBalanceModal({\n        originReaction: {\n          chatId,\n          messageId,\n          amount,\n        },\n      });\n      resetLocalPaidReactions({\n        chatId,\n        messageId,\n      });\n      return;\n    }\n\n    const currentScale = Number(getComputedStyle(button).scale) || 1;\n    animationRef.current?.cancel();\n    // Animate scaling by 20%, and then returning to 1\n    animationRef.current = button.animate([\n      { scale: currentScale },\n      { scale: Math.min(currentScale * 1.2, MAX_SCALE), offset: 0.2 },\n      { scale: 1 },\n    ], {\n      duration: 500 * currentScale,\n      easing: 'ease-out',\n    });\n  }, [reaction, availableStars, areStarsLoaded, chatId, messageId]);\n\n  const prevAmount = usePrevious(reaction.localAmount);\n\n  const {\n    shouldRender: shouldRenderPaidCounter,\n  } = useShowTransition({\n    isOpen: Boolean(reaction.localAmount),\n    ref: counterRef,\n    className: 'slow',\n    withShouldRender: true,\n  });\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        isOwnMessage && styles.own,\n        isPaid && styles.paid,\n        isReactionChosen(reaction) && styles.chosen,\n        isReactionChosen(reaction) && chosenClassName,\n        className,\n      )}\n      size=\"tiny\"\n      ref={ref}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      onClick={handleClick}\n    >\n      {reaction.reaction.type === 'paid' ? (\n        <>\n          <PaidReactionEmoji\n            className={styles.animatedEmoji}\n            containerId={containerId}\n            reaction={reaction.reaction}\n            size={REACTION_SIZE}\n            localAmount={reaction.localAmount}\n            observeIntersection={observeIntersection}\n          />\n          <Sparkles preset=\"reaction\" />\n          {shouldRenderPaidCounter && (\n            <AnimatedCounter\n              ref={counterRef}\n              text={`+${formatIntegerCompact(reaction.localAmount || prevAmount!)}`}\n              className={styles.paidCounter}\n            />\n          )}\n        </>\n      ) : (\n        <ReactionAnimatedEmoji\n          className={styles.animatedEmoji}\n          containerId={containerId}\n          reaction={reaction.reaction}\n          size={REACTION_SIZE}\n          observeIntersection={observeIntersection}\n        />\n      )}\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter\n          text={formatIntegerCompact(reaction.count + (reaction.localAmount || 0))}\n          className={styles.counter}\n        />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport type { ThreadId } from '../../../../types';\n\nimport { getReactionKey, isReactionChosen } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { getMessageKey } from '../../../../util/keys/messageKey';\n\nimport useEffectOnce from '../../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport ReactionButton from './ReactionButton';\nimport SavedTagButton from './SavedTagButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: ThreadId;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  isCurrentUserPremium?: boolean;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  availableStars?: number;\n};\n\nconst MAX_RECENT_AVATARS = 3;\nconst PAID_SEND_DELAY = 5000;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  threadId,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n  isCurrentUserPremium,\n  tags,\n  availableStars,\n}) => {\n  const {\n    toggleReaction,\n    addLocalPaidReaction,\n    updateMiddleSearch,\n    performMiddleSearch,\n    openPremiumModal,\n    resetLocalPaidReactions,\n    showNotification,\n  } = getActions();\n  const lang = useOldLang();\n\n  const { results, areTags, recentReactions } = message.reactions!;\n\n  const totalCount = useMemo(() => (\n    results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [results]);\n\n  const recentReactorsByReactionKey = useMemo(() => {\n    const global = getGlobal();\n\n    return recentReactions?.reduce((acc, recentReaction) => {\n      const { reaction, peerId } = recentReaction;\n      const key = getReactionKey(reaction);\n      const peer = selectPeer(global, peerId);\n\n      if (!peer) return acc;\n\n      const peers = acc[key] || [];\n      peers.push(peer);\n      acc[key] = peers;\n      return acc;\n    }, {} as Record<ApiReactionKey, ApiPeer[]>);\n  }, [recentReactions]);\n\n  const props = useMemo(() => {\n    const messageKey = getMessageKey(message);\n    return results.map((reaction) => {\n      const reactionKey = getReactionKey(reaction.reaction);\n      const recentReactors = recentReactorsByReactionKey?.[reactionKey];\n      const shouldHideRecentReactors = totalCount > MAX_RECENT_AVATARS || noRecentReactors;\n      const tag = areTags ? tags?.[reactionKey] : undefined;\n\n      return {\n        reaction,\n        reactionKey,\n        messageKey,\n        recentReactors: !shouldHideRecentReactors ? recentReactors : undefined,\n        isChosen: isReactionChosen(reaction),\n        tag,\n      };\n    });\n  }, [message, noRecentReactors, recentReactorsByReactionKey, results, areTags, tags, totalCount]);\n\n  const handleClick = useLastCallback((reaction: ApiReaction) => {\n    if (areTags) {\n      if (!isCurrentUserPremium) {\n        openPremiumModal({\n          initialSection: 'saved_tags',\n        });\n        return;\n      }\n\n      updateMiddleSearch({ chatId: message.chatId, threadId, update: { savedTag: reaction } });\n      performMiddleSearch({ chatId: message.chatId, threadId });\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  const paidLocalCount = useMemo(() => results.find((r) => r.reaction.type === 'paid')?.localAmount || 0, [results]);\n\n  const handlePaidClick = useLastCallback((count: number) => {\n    addLocalPaidReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      count,\n    });\n  });\n\n  useEffect(() => {\n    if (!paidLocalCount) return;\n\n    showNotification({\n      localId: getMessageKey(message),\n      title: lang('StarsSentTitle'),\n      message: lang('StarsSentText', paidLocalCount),\n      actionText: lang('StarsSentUndo'),\n      cacheBreaker: paidLocalCount.toString(),\n      action: {\n        action: 'resetLocalPaidReactions',\n        payload: { chatId: message.chatId, messageId: message.id },\n      },\n      dismissAction: {\n        action: 'sendPaidReaction',\n        payload: { chatId: message.chatId, messageId: message.id },\n      },\n      duration: PAID_SEND_DELAY,\n      shouldShowTimer: true,\n      disableClickDismiss: true,\n      icon: 'star',\n    });\n  }, [lang, message, paidLocalCount]);\n\n  const handleRemoveReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  // Reset paid reactions on unmount\n  useEffectOnce(() => () => {\n    resetLocalPaidReactions({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {props.map(({\n        reaction, recentReactors, messageKey, reactionKey, isChosen, tag,\n      }) => (\n        areTags ? (\n          <SavedTagButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            isChosen={isChosen}\n            reaction={reaction.reaction as ApiReaction}\n            tag={tag}\n            withContextMenu={isCurrentUserPremium}\n            onClick={handleClick}\n            onRemove={handleRemoveReaction}\n            observeIntersection={observeIntersection}\n          />\n        ) : (\n          <ReactionButton\n            key={reactionKey}\n            chatId={message.chatId}\n            messageId={message.id}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            recentReactors={recentReactors}\n            reaction={reaction}\n            onClick={handleClick}\n            onPaidClick={handlePaidClick}\n            observeIntersection={observeIntersection}\n            availableStars={availableStars}\n          />\n        )\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FPceNkgD\",\"inactive\":\"hruUWBuj\",\"mirrored\":\"GydRBA08\",\"effect\":\"WMMaWlOL\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useOverlayPosition from './hooks/useOverlayPosition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\nimport Portal from '../../ui/Portal';\n\nimport styles from './Sticker.module.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const effectRef = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n  const isMirrored = !message.isOutgoing;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getStickerMediaHash(sticker, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect || !withEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n    }\n  }, [hasEffect, canPlay, shouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const shouldRenderEffect = hasEffect && withEffect && effectBlobUrl && isPlayingEffect;\n  useOverlayPosition({\n    anchorRef: ref,\n    overlayRef: effectRef,\n    isMirrored,\n    isDisabled: !shouldRenderEffect,\n  });\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'media-inner',\n    styles.root,\n    isMemojiSticker && styles.inactive,\n    hasEffect && isMirrored && styles.mirrored,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {shouldRenderEffect && (\n        <Portal>\n          <AnimatedSticker\n            ref={effectRef}\n            key={mediaHashEffect}\n            className={buildClassName(styles.effect, isMirrored && styles.mirrored)}\n            tgsUrl={effectBlobUrl}\n            size={width * EFFECT_SIZE_MULTIPLIER}\n            play\n            isLowPriority\n            noLoop\n            onEnded={handleEffectEnded}\n          />\n        </Portal>\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useOldLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useUnmountCleanup,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ChatTranslatedMessages, MessageListType } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  FocusDirection, IAlbum, ISettings, ScrollTargetPosition, ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { OnIntersectPinnedMessage } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getIsDownloading,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageDownloadableMedia,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectActiveDownloads,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectCanReplyToMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentMiddleSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport getSingularPaidMedia from './helpers/getSingularPaidMedia';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport MessageText from '../../common/MessageText';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport FactCheck from './FactCheck';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageEffect from './MessageEffect';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport PaidMediaOverlay from './PaidMediaOverlay';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withAnimatedEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n  viaBusinessBot?: ApiUser;\n  effect?: ApiAvailableEffect;\n  availableStars?: number;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  scrollTargetPosition,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withAnimatedEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  viaBusinessBot,\n  effect,\n  availableStars,\n  onIntersectPinnedMessage,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n    markMentionsRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useOldLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [shouldPlayEffect, requestEffect, hideEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  useShowTransition({\n    ref,\n    isOpen: isShown || isJustAdded,\n    noMountTransition: noAppearanceAnimation && !isJustAdded,\n    className: false,\n  });\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError, factCheck,\n  } = message;\n\n  useUnmountCleanup(() => {\n    if (message.isPinned) {\n      const id = album ? album.mainMessage.id : messageId;\n      onIntersectPinnedMessage({ viewportPinnedIdsToRemove: [id] });\n    }\n  });\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !isAnonymousForwards\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(storyData && !storyData.isMention);\n  const canShowSenderBoosts = Boolean(senderBoosts) && !asForwarded && isFirstInGroup;\n  const isStoryMention = storyData?.isMention;\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isAlbum = Boolean(album)\n    && (\n      (album.isPaidMedia && paidMedia!.extendedMedia.length > 1)\n      || album.messages.length > 1\n    ) && !album.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuAnchor !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasFactCheck = Boolean(factCheck?.text);\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || storyData) ? originSender : messageSender;\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n  );\n\n  const handleEffectClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    requestEffect();\n  });\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const textMessage = album?.hasMultipleCaptions ? undefined : (album?.captionMessage || message);\n  const hasTextContent = textMessage && hasMessageText(textMessage);\n  const hasText = hasTextContent || hasFactCheck;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasTextContent ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || shouldPlayEffect) && 'has-active-effect',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const text = textMessage && getMessageContent(textMessage).text;\n  const isInvertedMedia = Boolean(message.isInvertedMedia);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  useEffect(() => {\n    if ((sticker?.hasEffect || effect) && ((\n      memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n    ) || isLocal)) {\n      requestEffect();\n    }\n  }, [effect, isLocal, memoFirstUnreadIdRef, messageId, sticker?.hasEffect]);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePreviousDeprecated(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const hasOutsideReactions = hasReactions\n    && (isCustomShape || ((photo || video || storyData || (location?.mediaType === 'geo')) && !hasText));\n\n  const contentClassName = buildContentClassName(message, album, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.mediaType === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n    hasOutsideReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize && !isInvertedMedia) {\n    metaPosition = 'in-text';\n  } else if (isInvertedMedia && !emojiSize && (hasFactCheck || webPage)) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (hasOutsideReactions) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    Boolean(focusedQuote),\n    scrollTargetPosition,\n  );\n\n  const viaBusinessBotTitle = viaBusinessBot ? getSenderTitle(lang, viaBusinessBot) : undefined;\n\n  const canShowPostAuthor = !message.senderId;\n  const signature = viaBusinessBotTitle || (canShowPostAuthor && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    beginHeavyAnimation(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction, message.hasUnreadMention]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      } else if (video) {\n        if (isRoundVideo) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions({\n            media: video,\n            isOwn,\n            asForwarded,\n            noAvatars,\n            isMobile,\n          }).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (!asForwarded && invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (!asForwarded && calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, noAvatars, photo, sticker, text?.text, video, isRoundVideo,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if (!textMessage) return undefined;\n    return (\n      <MessageText\n        messageOrStory={textMessage}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n        isInSelectMode={isInSelectMode}\n        canBeEmpty={hasFactCheck}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        effectEmoji={effect?.emoticon}\n        onClick={handleMetaClick}\n        onEffectClick={handleEffectClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        threadId={threadId}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n        availableStars={availableStars}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup\n      && (!hasText || (isInvertedMedia && !hasFactCheck && !hasReactions)) && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={shouldPlayEffect}\n            withEffect={withAnimatedEffects}\n            onStopEffect={hideEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {withAnimatedEffects && effect && !isLocal && (\n          <MessageEffect\n            shouldPlay={shouldPlayEffect}\n            messageId={message.id}\n            isMirrored={!message.isOutgoing}\n            effect={effect}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onStop={hideEffect}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && isRoundVideo && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            document={document}\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {isInvertedMedia && renderInvertedMediaContent(hasCustomAppendix)}\n\n        {!isInvertedMedia && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {hasText && !hasAnimatedEmoji && (\n              <div className={textContentClass} dir=\"auto\">\n                {renderMessageText()}\n                {isTranslationPending && (\n                  <div className=\"translation-animation\">\n                    <div className=\"text-loading\">\n                      {renderMessageText(true)}\n                    </div>\n                  </div>\n                )}\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {metaPosition === 'in-text' && renderReactionsAndMeta()}\n              </div>\n            )}\n            {renderWebPage()}\n          </>\n        )}\n\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderInvertedMediaContent(hasCustomAppendix: boolean) {\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n    );\n    const footerClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    const hasMediaAfterText = isAlbum || (!isAlbum && photo) || (!isAlbum && video && !isRoundVideo);\n    const hasContentAfterText = hasMediaAfterText || (!hasAnimatedEmoji && hasFactCheck);\n    const isMetaInText = metaPosition === 'in-text';\n\n    return (\n      <>\n        {renderWebPage()}\n        {hasText && !hasAnimatedEmoji && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {!hasContentAfterText && isMetaInText && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {hasContentAfterText && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {!hasAnimatedEmoji && (\n              <div className={footerClass} dir=\"auto\">\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {isMetaInText && renderReactionsAndMeta()}\n              </div>\n            )}\n          </>\n        )}\n\n      </>\n    );\n  }\n\n  function renderWebPage() {\n    return webPage && (\n      <WebPage\n        message={message}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        noAvatars={noAvatars}\n        canAutoLoad={canAutoLoadMedia}\n        canAutoPlay={canAutoPlayMedia}\n        asForwarded={asForwarded}\n        isDownloading={isDownloading}\n        isProtected={isProtected}\n        theme={theme}\n        story={webPageStory}\n        isConnected={isConnected}\n        backgroundEmojiId={sender?.color?.backgroundEmojiId}\n        shouldWarnAboutSvg={shouldWarnAboutSvg}\n        autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n        onAudioPlay={handleAudioPlay}\n        onMediaClick={handleMediaClick}\n        onCancelMediaTransfer={handleCancelUpload}\n      />\n    );\n  }\n\n  function renderInvertibleMediaContent(hasCustomAppendix: boolean) {\n    const content = (\n      <>\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            messageText={text?.text}\n            photo={photo}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handlePhotoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && !isRoundVideo && (\n          <Video\n            video={video}\n            isOwn={isOwn}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleVideoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n      </>\n    );\n\n    if (paidMedia) {\n      return (\n        <PaidMediaOverlay chatId={chatId} messageId={messageId} paidMedia={paidMedia} isOutgoing={isOwn}>\n          {content}\n        </PaidMediaOverlay>\n      );\n    }\n\n    return content;\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location || paidMedia;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    const shouldRenderForwardAvatar = asForwarded && senderPeer;\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n            )}\n            {storyData && <Icon name=\"play-story\" />}\n            {shouldRenderForwardAvatar && (\n              <Avatar\n                className=\"forward-avatar\"\n                peer={senderPeer}\n                size=\"micro\"\n              />\n            )}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <StarIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender?.usernames?.length && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames[0].username}`)}\n            </span>\n          </>\n        )}\n        <div className=\"title-spacer\" />\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n        {canShowSenderBoosts && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <Icon name=\"select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper',\n          contentClassName.includes('text') && 'can-select-text',\n          contentClassName.includes('giveaway') && 'giveaway-result-content')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && (\n            <div className={buildClassName(\n              'message-action-buttons',\n              isLoadingComments && 'message-action-buttons-shown',\n            )}\n            >\n              {canForward && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel={lang('lng_context_forward_msg')}\n                  onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n                >\n                  <Icon name=\"share-filled\" />\n                </Button>\n              )}\n              {canFocus && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel=\"Focus message\"\n                  onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n                >\n                  <Icon name=\"arrow-right\" />\n                </Button>\n              )}\n            </div>\n          )}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            threadId={threadId}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n            availableStars={availableStars}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, viaBusinessBotId, effectId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectSender(global, replyMessage)\n      : forwardHeader && !isRepliesChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isRepliesChat && !isAnonymousForwards && replyMessageChat && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n      quote: focusedQuote, scrollTargetPosition,\n    } = (isFocused && focusedMessage) || {};\n\n    const middleSearch = selectCurrentMiddleSearch(global);\n    const highlight = middleSearch?.results?.query\n      && `${middleSearch.isHashtag ? '#' : ''}${middleSearch.results.query}`;\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const canReply = messageListType === 'thread' && selectCanReplyToMessage(global, message, threadId);\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = getMessageDownloadableMedia(message);\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.commentsMessage?.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? selectTopicFromMessage(global, message) : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig?.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    const viaBusinessBot = viaBusinessBotId ? selectUser(global, viaBusinessBotId) : undefined;\n\n    const effect = effectId ? global.availableEffectById[effectId] : undefined;\n\n    const { balance: availableStars } = global.stars || {};\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withAnimatedEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n        scrollTargetPosition,\n      }),\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n      viaBusinessBot,\n      effect,\n      availableStars,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useOldLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: ThreadId,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n  isReplyPrivate?: boolean,\n  isRepliesChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer, searchChatMediaMessages,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId, content: { paidMedia },\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n  const openMediaViewerWithPhotoOrVideo = useLastCallback((withDynamicLoading: boolean): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n    if (withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    }\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n      withDynamicLoading,\n    });\n  });\n  const handlePhotoMediaClick = useLastCallback((): void => {\n    const withDynamicLoading = !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n  const handleVideoMediaClick = useLastCallback(() => {\n    const isGif = message.content?.video?.isGif;\n    const withDynamicLoading = !isGif && !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number, albumIndex?: number): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n\n    searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      mediaIndex: albumIndex,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n      withDynamicLoading: !paidMedia,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\nimport getSingularPaidMedia from './getSingularPaidMedia';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  album?: IAlbum,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n    hasOutsideReactions,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n    hasOutsideReactions?: boolean;\n  } = {},\n) {\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const content = getMessageContent(message);\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo,\n    audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = content;\n  const text = album?.hasMultipleCaptions ? undefined : getMessageContent(album?.captionMessage || message).text;\n  const hasFactCheck = Boolean(message.factCheck?.text);\n\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isInvertedMedia = message.isInvertedMedia;\n  const isInvertibleMedia = photo || (video && !isRoundVideo) || album || webPage;\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia || paidMedia;\n  const hasText = text || location?.mediaType === 'venue' || isGeoLiveActive || hasFactCheck;\n  const isMediaWithNoText = isMedia && !hasText;\n  const hasInlineKeyboard = Boolean(message.inlineButtons);\n  const isViaBot = Boolean(message.viaBotId);\n\n  const hasFooter = (() => {\n    if (isInvertedMedia && isInvertibleMedia) {\n      if (hasReactions && !hasOutsideReactions) return true;\n      if (hasFactCheck) return true;\n      if (webPage && hasText) return true;\n      return false;\n    }\n    return hasText;\n  })();\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (!Object.keys(content).length) {\n    classNames.push('unsupported');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (isRoundVideo) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (hasOutsideReactions) {\n    classNames.push('has-outside-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName || hasFactCheck) {\n      classNames.push('has-solid-background');\n    }\n\n    if (hasFactCheck) {\n      classNames.push('has-fact-check');\n    }\n\n    if (isLastInGroup && !hasInlineKeyboard && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  if (isInvertibleMedia && isInvertedMedia) {\n    classNames.push('is-inverted-media');\n  }\n\n  if (hasFooter) {\n    classNames.push('has-footer');\n  } else {\n    classNames.push('no-footer');\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ISettings['theme'];\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    hideSponsoredMessages,\n    clickSponsoredMessage,\n    reportSponsoredMessage,\n    openMediaViewer,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleReportSponsoredMessage = useLastCallback(() => {\n    reportSponsoredMessage({ chatId, randomId: message!.randomId });\n  });\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsoredMessages();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ isMedia: photo || isGif ? true : undefined, chatId });\n    openUrl({ url: message!.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    clickSponsoredMessage({ isMedia: true, chatId });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <span onClick={openAboutAdsModal} className=\"ad-about\">{lang('SponsoredMessageAdWhatIsThis')}</span>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          message={message!}\n          onAboutAdsClick={openAboutAdsModal}\n          onReportAd={handleReportSponsoredMessage}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        isMonetizationSharing={message.canReport}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  areAdsEnabled?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  areAdsEnabled,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useOldLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {areAdsEnabled && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useOldLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  areAdsEnabled,\n  channelJoinInfo,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (areAdsEnabled && isChannelChat && isSynced && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, areAdsEnabled]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo) return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              type: 'joinedChannel',\n              mediaType: 'action',\n              text: '',\n              translationValues: [],\n              targetChatId: message.chatId,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isRepliesChat || isAnonymousForwards || isChannelWithAvatars);\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium && !hasMessages ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          areAdsEnabled={areAdsEnabled}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Guj4V7W_\",\"pinnedMessage\":\"GgG7nh8p\",\"messageText\":\"LPdDfCw0\",\"loading\":\"clu9vjEC\",\"pinListIcon\":\"OibpUlOd\",\"pinListIconHidden\":\"_f3hwC8p\",\"no-hover\":\"Nki3ifmz\",\"noHover\":\"Nki3ifmz\",\"messageTextTransition\":\"lo853Tki\",\"withMedia\":\"hRtSF_Ex\",\"title\":\"bY9umAoY\",\"summary\":\"Ko14czNN\",\"inlineButton\":\"lfWlkB7k\",\"pictogramTransition\":\"ud4LJMTI\",\"pinnedThumb\":\"_M8tJtJD\",\"pinnedThumbImage\":\"KKUhI313\",\"fade-in\":\"cq06IGIL\",\"fadeIn\":\"cq06IGIL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { Signal } from '../../util/signals';\n\nimport { getMessageIsSpoiler, getMessageMediaHash, getMessageSingleInlineButton } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport renderKeyboardButtonText from './composer/helpers/renderKeyboardButtonText';\n\nimport useDerivedState from '../../hooks/useDerivedState';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  getLoadingPinnedId: Signal<number | undefined>;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  getLoadingPinnedId, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useOldLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: message.chatId, messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getIsSavedDialog,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getMessageKey } from '../../util/keys/messageKey';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  isSavedDialog?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  isSavedDialog,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openThread,\n    openStickerSet,\n    updateMiddleSearch,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(messageId);\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransitionDeprecated(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransitionDeprecated(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransitionDeprecated(Boolean(pinnedMessage) && !isMiddleSearchOpen, undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          getLoadingPinnedId={getLoadingPinnedId}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      isSavedDialog,\n      isMiddleSearchOpen,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PremiumGiftModal from '../main/premium/PremiumGiftModal.async';\nimport StarsGiftModal from '../main/premium/StarsGiftModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isPremiumGiftModalOpen?: boolean;\n  isStarsGiftModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isPremiumGiftModalOpen,\n  isStarsGiftModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, topics, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <PremiumGiftModal isOpen={isPremiumGiftModalOpen} />\n      <StarsGiftModal isOpen={isStarsGiftModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftModal, starsGiftModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isPremiumGiftModalOpen: giftModal?.isOpen,\n      isStarsGiftModalOpen: starsGiftModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const isContactRequirePremium = selectUserFullInfo(global, chatId)?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'starsBalanceModal' |\n'isStarPaymentModalOpen' |\n'starsTransactionModal' |\n'paidReactionModal' |\n'webApps' |\n'starsTransactionModal' |\n'chatInviteModal' |\n'starsSubscriptionModal'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  isStarPaymentModalOpen: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n  storyIds?: number[],\n  pinnedStoryIds?: number[],\n  archiveStoryIds?: number[],\n  similarChannels?: string[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  title: string;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  profileState,\n  theme,\n  isChannel,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadPreviewMedias,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => ([\n    ...(isSavedMessages && !isSavedDialog ? [{ type: 'dialogs' as const, title: 'SavedDialogsTab' }] : []),\n    ...(hasStoriesTab ? [{ type: 'stories' as const, title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && isSavedMessages ? [{ type: 'storiesArchive' as const, title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members' as const, title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...(hasPreviewMediaTab ? [{\n      type: 'previewMedia' as const, title: 'ProfileBotPreviewTab',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!isTopicInfo ? [{ type: 'voice' as const, title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats' as const, title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels' as const, title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasPreviewMediaTab,\n    hasStoriesTab,\n    isChannel,\n    isTopicInfo,\n    similarChannels,\n    isSavedMessages,\n    isSavedDialog,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    handleLoadCommonChats,\n    searchSharedMediaMessages,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n  );\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (viewportIds && !viewportIds?.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useOldLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return lang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{lang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{lang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{lang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{lang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{lang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>{\n                          isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                            : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                        }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport VerificationMonetizationModal from '../../common/VerificationMonetizationModal.async';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n  passwordHint?: string;\n  error?: string;\n  isLoading?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n  passwordHint,\n  error,\n  isLoading,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [\n    isVerificationMonetizationModalOpen, openVerificationMonetizationModal, closeVerificationMonetizationModal,\n  ] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.filter(Boolean).forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? <span className={styles.decimalPart}>.{decimalTonPart}</span> : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}\n          {decimalUsdPart ? <span className={styles.decimalUsdPart}>.{decimalUsdPart}</span> : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openVerificationMonetizationModal();\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <VerificationMonetizationModal\n        chatId={chatId}\n        isOpen={isVerificationMonetizationModalOpen}\n        onClose={closeVerificationMonetizationModal}\n        passwordHint={passwordHint}\n        error={error}\n        isLoading={isLoading}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n    const isLoading = global.monetizationInfo?.isLoading;\n    const error = global.monetizationInfo?.error;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n      passwordHint,\n      error,\n      isLoading,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"e0JMk_Kh\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ConfettiStyle, TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumGiftingPickerModal = useModuleLoader(Bundles.Extra, 'PremiumGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumGiftingPickerModal ? <PremiumGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default PremiumGiftingPickerModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport React, {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiMessage, ApiUser } from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumGiftingPickerModal from './premium/PremiumGiftingPickerModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isPremiumGiftingPickerModal?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isPremiumGiftingPickerModal,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadAttachBots();\n      loadContactList();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadTimezones();\n      loadQuickReplies();\n      loadStarStatus();\n      loadPremiumGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadGenericEmojiEffects();\n      loadSavedReactionTags();\n      loadAuthorizations();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <PremiumGiftingPickerModal isOpen={isPremiumGiftingPickerModal} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      giftingModal,\n      starsGiftingModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isPremiumGiftingPickerModal: giftingModal?.isOpen,\n      isStarsGiftingPickerModal: starsGiftingModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"fWE9Tkfe\",\"progress\":\"F0JPgXgb\",\"reaction\":\"JJ_DPeVV\",\"symbol\":\"wapdILU7\",\"sparkle\":\"AS3Scly3\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\n\nimport styles from './Sparkles.module.scss';\n\ntype ReactionParameters = {\n  preset: 'reaction';\n};\n\ntype ProgressParameters = {\n  preset: 'progress';\n};\n\ntype PresetParameters = ReactionParameters | ProgressParameters;\n\ntype OwnProps = {\n  className?: string;\n} & PresetParameters;\n\nconst SYMBOL = '✦';\nconst ANIMATION_DURATION = 5;\n\n// Values are in percents\nconst REACTION_POSITIONS = [{\n  x: 20,\n  y: 0,\n  size: 100,\n  durationShift: 10,\n}, {\n  x: 15,\n  y: 15,\n  size: 75,\n  durationShift: 70,\n}, {\n  x: 10,\n  y: 35,\n  size: 75,\n  durationShift: 90,\n}, {\n  x: 20,\n  y: 70,\n  size: 125,\n  durationShift: 30,\n}, {\n  x: 40,\n  y: 10,\n  size: 125,\n  durationShift: 0,\n}, {\n  x: 45,\n  y: 60,\n  size: 75,\n  durationShift: 60,\n}, {\n  x: 60,\n  y: -10,\n  size: 100,\n  durationShift: 20,\n}, {\n  x: 55,\n  y: 40,\n  size: 75,\n  durationShift: 60,\n}, {\n  x: 70,\n  y: 65,\n  size: 100,\n  durationShift: 90,\n}, {\n  x: 80,\n  y: 10,\n  size: 75,\n  durationShift: 30,\n}, {\n  x: 80,\n  y: 45,\n  size: 125,\n  durationShift: 0,\n}];\nconst PROGRESS_POSITIONS = generateRandomProgressPositions(100);\n\nconst Sparkles = ({\n  className,\n  ...presetSettings\n}: OwnProps) => {\n  if (presetSettings.preset === 'reaction') {\n    return (\n      <div className={buildClassName(styles.root, styles.reaction, className)}>\n        {REACTION_POSITIONS.map((position) => {\n          const shiftX = Math.cos(Math.atan2(-50 + position.y, -50 + position.x)) * 100;\n          const shiftY = Math.sin(Math.atan2(-50 + position.y, -50 + position.x)) * 100;\n          return (\n            <div\n              className={styles.symbol}\n              style={buildStyle(\n                `top: ${position.y}%`,\n                `left: ${position.x}%`,\n                `--_duration-shift: ${(-position.durationShift / 100) * ANIMATION_DURATION}s`,\n                `--_shift-x: ${shiftX}%`,\n                `--_shift-y: ${shiftY}%`,\n                `scale: ${position.size}%`,\n              )}\n            >\n              {SYMBOL}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  if (presetSettings.preset === 'progress') {\n    return (\n      <div className={buildClassName(styles.root, styles.progress, className)}>\n        {PROGRESS_POSITIONS.map((position) => {\n          return (\n            <div\n              className={styles.symbol}\n              style={buildStyle(\n                `top: ${position.y}%`,\n                `left: ${position.x}%`,\n                `--_shift-x: ${position.velocityX}%`,\n                `--_shift-y: ${position.velocityY}%`,\n                `scale: ${position.scale}%`,\n                `--_duration-shift: ${(-position.durationShift / 100) * ANIMATION_DURATION}s`,\n              )}\n            >\n              {SYMBOL}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  return undefined;\n};\n\nfunction generateRandomProgressPositions(count: number) {\n  const positions = [];\n  for (let i = 0; i < count; i++) {\n    positions.push({\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      velocityX: (Math.random() * 5 + 15) * 100,\n      velocityY: (Math.random() * 10 - 5) * 100,\n      scale: (Math.random() * 0.5 + 0.5) * 100,\n      durationShift: Math.random() * 100,\n    });\n  }\n  return positions;\n}\n\nexport default memo(Sparkles);\n","import type {\n  ApiInputInvoice,\n  ApiMessage,\n  ApiRequestInputInvoice,\n  ApiStarsTransaction,\n  ApiStarsTransactionPeer,\n  ApiStarsTransactionPeerPeer,\n} from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { GlobalState } from '../types';\n\nimport { formatInteger } from '../../util/textFormat';\nimport { selectChat, selectUser } from '../selectors';\n\nexport function getRequestInputInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice,\n): ApiRequestInputInvoice | undefined {\n  if (inputInvoice.type === 'slug') return inputInvoice;\n\n  if (inputInvoice.type === 'starsgift') {\n    const {\n      userId, stars, amount, currency,\n    } = inputInvoice;\n    const user = selectUser(global, userId);\n\n    if (!user) return undefined;\n\n    return {\n      type: 'stars',\n      purpose: {\n        type: 'starsgift',\n        user,\n        stars,\n        amount,\n        currency,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'stars') {\n    const {\n      stars, amount, currency,\n    } = inputInvoice;\n\n    return {\n      type: 'stars',\n      purpose: {\n        type: 'stars',\n        stars,\n        amount,\n        currency,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'chatInviteSubscription') {\n    const { hash } = inputInvoice;\n\n    return {\n      type: 'chatInviteSubscription',\n      hash,\n    };\n  }\n\n  if (inputInvoice.type === 'message') {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return undefined;\n    }\n    return {\n      type: 'message',\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  if (inputInvoice.type === 'giftcode') {\n    const {\n      userIds, boostChannelId, amount, currency, option,\n    } = inputInvoice;\n    const users = userIds.map((id) => selectUser(global, id)).filter(Boolean);\n    const boostChannel = boostChannelId ? selectChat(global, boostChannelId) : undefined;\n\n    return {\n      type: 'giveaway',\n      option,\n      purpose: {\n        type: 'giftcode',\n        amount,\n        currency,\n        users,\n        boostChannel,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'starsgiveaway') {\n    const {\n      chatId, additionalChannelIds, amount, currency, untilDate, areWinnersVisible, countries,\n      isOnlyForNewSubscribers, prizeDescription, stars, users,\n    } = inputInvoice;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return undefined;\n    }\n    const additionalChannels = additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n    return {\n      type: 'starsgiveaway',\n      purpose: {\n        type: 'starsgiveaway',\n        amount,\n        currency,\n        chat,\n        additionalChannels,\n        untilDate,\n        areWinnersVisible,\n        countries,\n        isOnlyForNewSubscribers,\n        prizeDescription,\n        stars,\n        users,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'giveaway') {\n    const {\n      chatId, additionalChannelIds, amount, currency, option, untilDate, areWinnersVisible, countries,\n      isOnlyForNewSubscribers, prizeDescription,\n    } = inputInvoice;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return undefined;\n    }\n    const additionalChannels = additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n    return {\n      type: 'giveaway',\n      option,\n      purpose: {\n        type: 'giveaway',\n        amount,\n        currency,\n        chat,\n        additionalChannels,\n        untilDate,\n        areWinnersVisible,\n        countries,\n        isOnlyForNewSubscribers,\n        prizeDescription,\n      },\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildStarsTransactionCustomPeer(\n  peer: Exclude<ApiStarsTransactionPeer, ApiStarsTransactionPeerPeer>,\n): CustomPeer {\n  if (peer.type === 'appStore') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.AppleTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.AppleTopUp.Subtitle',\n      peerColorId: 5,\n    };\n  }\n\n  if (peer.type === 'playMarket') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.GoogleTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.GoogleTopUp.Subtitle',\n      peerColorId: 3,\n    };\n  }\n\n  if (peer.type === 'fragment') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.FragmentTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.FragmentTopUp.Subtitle',\n      customPeerAvatarColor: '#000000',\n    };\n  }\n\n  if (peer.type === 'premiumBot') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.PremiumBotTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.PremiumBotTopUp.Subtitle',\n      peerColorId: 1,\n      withPremiumGradient: true,\n    };\n  }\n\n  if (peer.type === 'ads') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.TelegramAds.Title',\n      subtitleKey: 'Stars.Intro.Transaction.TelegramAds.Subtitle',\n      peerColorId: 2,\n    };\n  }\n\n  return {\n    avatarIcon: 'star',\n    isCustomPeer: true,\n    titleKey: 'Stars.Intro.Transaction.Unsupported.Title',\n    subtitleKey: 'Stars.Intro.Transaction.Unsupported.Title',\n    peerColorId: 0,\n  };\n}\n\nexport function formatStarsTransactionAmount(amount: number) {\n  if (amount < 0) {\n    return `- ${formatInteger(Math.abs(amount))}`;\n  }\n\n  return `+ ${formatInteger(amount)}`;\n}\n\nexport function getStarsTransactionFromGift(message: ApiMessage): ApiStarsTransaction | undefined {\n  const { action } = message.content;\n\n  if (action?.type !== 'giftStars') return undefined;\n\n  const { transactionId, stars } = action;\n\n  return {\n    id: transactionId!,\n    stars: stars!,\n    peer: {\n      type: 'peer',\n      id: message.isOutgoing ? message.chatId : (message.senderId || message.chatId),\n    },\n    date: message.date,\n    isGift: true,\n    isMyGift: message.isOutgoing || undefined,\n  };\n}\n\nexport function getPrizeStarsTransactionFromGiveaway(message: ApiMessage): ApiStarsTransaction | undefined {\n  const { action } = message.content;\n\n  if (action?.type !== 'prizeStars') return undefined;\n\n  const { transactionId, stars, targetChatId } = action;\n\n  return {\n    id: transactionId!,\n    stars: stars!,\n    peer: {\n      type: 'peer',\n      id: targetChatId!,\n    },\n    date: message.date,\n    isPrizeStars: true,\n  };\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","_ref","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","arguments","undefined","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","_ref6","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","_ref7","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","setTimeout","getGlobal","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","selectIsChatListed","loadTopChats","lastMessage","addMessages","_ref2","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","limit","count","localMessages","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","fetchUnreadMentions","addUnreadMentions","payload","shouldForceRender","onError","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","selectDraft","isForwarding","forwardMessages","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","showNotification","oldTranslate","join","messageListType","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","connectionState","isUserBot","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","then","fetchUnreadReactions","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","isShareMessageModalShown","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","oldSections","reportAdModal","sections","selectedOption","o","newSection","title","subtitle","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","isChatSuperGroup","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","toString","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","localMessage","globalSearch","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","updateGlobalSearch","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","hasSearchChanged","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","onFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","_ref8","otherTabId","tabThreads","_ref9","isCommentsInfo","_ref10","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","_ref11","threads","updateThread","_ref12","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPreload","isPrivate","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webApp","_len3","_key3","currentTabState","openedWebApps","webApps","key","getWebAppKey","originalWebApp","updatedValue","updatedWebAppKey","activeWebApp","activeWebAppKey","addWebAppToOpenList","makeActive","openModalIfNotOpen","_len5","_key5","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","_len7","_key7","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","isRemovedAppActive","openedWebAppsValues","openedWebAppsCount","hasOpenedWebApps","_len9","_key9","replaceIsWebAppModalOpen","value","_len11","_key11","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","botId","requestUrl","webAppName","webAppForCheck","isWepAppOpened","webAppKey","_len4","_key4","newActiveWebApp","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","isFromBotMenu","shouldMarkBotTrusted","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","appName","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","_len6","_key6","removeActiveWebAppFromOpenList","_len8","_key8","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","k","clearOpenedWebApps","_len10","_key10","replaceWebAppModalState","slug","trustedBotIds","newTrustedBotIds","callbackPayload","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","name","about","langCode","byKey","bio","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","requestInfo","saveInfo","inputInvoice","selectPaymentInputInvoice","requestInputInvoice","getRequestInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","form","setPaymentForm","getPaymentForm","setInvoiceInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","isStarPaymentModalOpen","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","requestConfetti","withStars","loadStarStatus","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","giftingModal","starsGiftingModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","forUserIds","giftModal","forUserId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","amount","openBoostStatistics","stars","currentStatus","needsTopupOptions","topupOptions","balance","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","isInbound","isOutbound","updateStarsBalance","isCancelled","subscriptionId","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","stopActiveReaction","loadSavedReactionTags","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","localIsPrivate","openStarsBalanceModal","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateMonetizationInfo","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","size","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","isSchedule","album","deleteMessageModal","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","isInvertedMedia","attachmentSettings","shouldPlayEffectInComposer","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","duration","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","starsBalanceModal","originPayment","clearPayment","sendPaidReaction","getStarsTransactionFromGift","starsTransactionModal","subscription","starsSubscriptionModal","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","reactionPicker","sendAsMessage","isForEffects","updatedResults","dismissNotification","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","isNotJoined","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","senderId","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","loadFullUser","targetUserFullInfo","botInfo","menuButton","threadInfos","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","processPremiumFloodWait","paidReactionPrivacy","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","monetizationInfo","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","STARS_CURRENCY_CODE","formatCurrencyAsString","giftModalState","isCompleted","starsModalState","icon","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","animationLevel","attachBots","selectTheme","canInstall","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","useLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","fluid","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","LeftSideMenuItems","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","usePrevious","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewer","LOGO_DIMENSIONS","height","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","viewportPinnedIds","lastFocusedId","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","PremiumGiftModal","StarsGiftModal","Stars","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","hasActiveMiddleSearch","shouldShowCount","mentionsCount","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","postAuthorTitle","inlineButtons","fromId","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","style","buildStyle","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","INTERSECTION_THROTTLE_FOR_MEDIA","getSingularPaidMedia","singularMedia","isPreview","AlbumRectPart","None","Top","Bottom","accumulate","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","isSingleMessage","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","target","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","isClosed","withSelectControl","WrappedComponent","ownProps","noSelectControls","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsByKey","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelUploadMedia","mediaCount","handlePaidMediaClick","handleAlbumMessageClick","handleCancelUpload","containerWidth","containerHeight","renderingPaidMedia","paidPhotoOrPreview","paidVideoOrPreview","getMessagePhoto","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","getIsDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","isCustomShape","shouldRenderLoading","useAsyncRendering","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","peerColor","shoudReset","emojiIconClassName","children","otherProps","getApiPeerColorClass","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","getContactName","countryList","phoneCodes","phoneCodeList","openAddContactDialog","isRegistered","canAddContact","getCanAddContact","handleOpenChat","handleAddContact","PeerColorWrapper","formatPhoneNumberWithCode","isText","COLOR","isToggleDisabled","cutoutRef","isCollapsed","isCollapsible","setIsCollapsed","useCollapsibleLines","countryLocalized","countryCode","DisplayNames","of","canExpand","handleExpand","handleToggle","prev","renderTextWithEntities","Separator","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","months","canPlayAnimatedEmojis","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","isoToEmoji","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstKey","giveawayDuration","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","buttonTexts","texts","renderKeyboardButtonText","j","RE_TME_LINK","renderIcon","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","requestMutation","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","formatCurrency","iconClassName","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","PinSvg","viewBox","cx","cy","d","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","dpr","useDevicePixelRatio","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePreviousDeprecated","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","effectEmoji","onTranslationClick","onEffectClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","requestMasterAndRequestCall","isMissed","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","isClickable","starsAmount","replaceWithTeact","STARS_ICON_PLACEHOLDER","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","observeIntersectionForPlaying","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","solutionEntities","onDismiss","question","getPollTypeString","AvatarList","CheckboxGroup","loadingOptions","isRound","RadioGroup","loadingOption","PollOption","getReadableVotersCount","ICON_SIZE","EFFECT_SIZE","MAX_EFFECT_COUNT","QUALITY","effectSize","effectRef","effectsIds","setEffectsIds","activeReaction","shouldPlayEffect","canAddMoreEffects","prevLocalAmount","shouldRenderEffect","handleEnded","newEffectsIds","rootClassName","animating","teactFastList","AnimatedIcon","StarReactionEffect","onEnded","REACTION_SIZE","selectAreStarsLoaded","recentReactors","chosenClassName","availableStars","onPaidClick","openPaidReactionModal","counterRef","animationRef","isPaid","areStarsLoaded","useSelector","handlePaidClick","prevReaction","currentScale","getComputedStyle","scale","cancel","animate","easing","prevAmount","shouldRenderPaidCounter","own","paid","isReactionChosen","PaidReactionEmoji","animatedEmoji","Sparkles","preset","paidCounter","ReactionAnimatedEmoji","counter","isOutside","metaChildren","noRecentReactors","addLocalPaidReaction","performMiddleSearch","recentReactorsByReactionKey","recentReaction","reactionKey","shouldHideRecentReactors","paidLocalCount","cacheBreaker","dismissAction","shouldShowTimer","disableClickDismiss","handleRemoveReaction","useEffectOnce","SavedTagButton","withContextMenu","onRemove","ReactionButton","withEffect","onStopEffect","openStickerSet","hasEffect","isMirrored","getStickerMediaHash","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","useOverlayPosition","anchorRef","overlayRef","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","Portal","AnimatedSticker","isLowPriority","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","viaBusinessBotId","isRepliesChat","isChatWithRepliesBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyPeerId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","middleSearch","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectCanReplyToMessage","downloadableMedia","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","senderBoosts","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","viaBusinessBot","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withAnimatedEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onIntersectPinnedMessage","animateUnreadReaction","markMentionsRead","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","requestEffect","isTouchScreen","useOnIntersect","contextMenuAnchor","contextMenuTarget","noAppearanceAnimation","markShown","useUnmountCleanup","viewportPinnedIdsToRemove","hasMessageReply","isReplyToMessage","paidMediaPhoto","paidMediaVideo","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","canShowSenderBoosts","isStoryMention","isRoundVideo","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasFactCheck","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","hasTtl","hasMessageTtl","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handlePhotoMediaClick","handleVideoMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","searchChatMediaMessages","isQuote","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","openMediaViewerWithPhotoOrVideo","isGif","albumMessageId","albumIndex","ScheduledAlbum","Album","selectWithGroupedId","useInnerHandlers","handleEffectClick","textMessage","hasTextContent","hasMessageText","hasText","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","LimitedMap","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","hasOutsideReactions","contentClassName","hasCommentCounter","hasActionButton","isGeoLiveActive","peerColorClass","isInvertibleMedia","classNames","MESSAGE_CONTENT_CLASS_NAME","isMediaWithNoText","hasInlineKeyboard","isViaBot","hasFooter","emojiOnlyCount","EMOJI_SIZES","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","viaBusinessBotTitle","canShowPostAuthor","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","beginHeavyAnimation","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","ROUND_VIDEO_DIMENSIONS_PX","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","canBeEmpty","ReactionStaticEmoji","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderWebPage","WebPage","onAudioPlay","onCancelMediaTransfer","renderInvertibleMediaContent","messageText","PaidMediaOverlay","renderSenderName","senderEmojiStatus","senderIsPremium","shouldRenderForwardAvatar","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","shouldReadMedia","TopicChip","EmbeddedMessage","senderChat","forwardSender","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","MessageEffect","shouldPlay","onStop","MessagePhoneCall","RoundVideo","onReadMedia","AudioOrigin","isSelectable","onPlay","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","Contact","Poll","Giveaway","Game","InvoiceMediaPreview","DotAnimation","footerClass","hasContentAfterText","isMetaInText","FactCheck","renderInvertedMediaContent","Invoice","Location","CommentButton","MessageAppendix","InlineButtons","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","viewSponsoredMessage","hideSponsoredMessages","clickSponsoredMessage","reportSponsoredMessage","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","handleReportSponsoredMessage","handleHideSponsoredMessage","hasMedia","handleOpenMedia","SponsoredMessage","renderMediaContent","isRecommended","isRectangular","canReport","onAboutAdsClick","onReportAd","isMonetizationSharing","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","shouldRenderBotInfo","onScrollDownToggle","onNotchToggle","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","useDerivedSignal","areDatesClickable","observeIntersectionForReading","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","dataset","shouldUpdateViews","albumMainId","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","getMessageOriginalId","Message","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","translationValues","targetChatId","orderRule","orderBy","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","top","findStuckDate","currentStuck","useStickyDates","handleScroll","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canBlockContact","isBasicGroup","isChatBasicGroup","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","onCheck","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","onUnpinMessage","onAllPinnedClick","getLoadingPinnedId","isFullWidth","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","PinnedMessageNavigation","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","shouldSendJoinRequest","isJoinRequest","emojiStatusSticker","isMiddleSearchOpen","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getCurrentPinnedIndex","onFocusPinnedMessage","openThreadWithInfo","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleOpenSearch","event","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","HeaderActions","canExpandActions","Link","isPrimary","ReactorListModal","MiddleSearch","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isPremiumGiftModalOpen","isStarsGiftModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","canShowOpenChatButton","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onDragEnter","MiddleHeader","isBlockingAnimation","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","StarsBalanceModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","StarsSubscriptionModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","idPrefix","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","hasCommonChatsTab","commonChatsCount","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","profileIds","pinnedStoryIds","storyByIds","archiveStoryIds","archiveIds","similarChannels","limitSimilarChannels","commonChatIds","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","loadCommonChats","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadPreviewMedias","deletingUserId","setDeletingUserId","profileId","isSavedMessages","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","Profile","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","PreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","canManage","selectCanManage","isEditingInvite","canViewStatistics","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","isCustomPeer","avatarIcon","peerColorId","CUSTOM_PEER_TO_BE_DISTRIBUTED","titleKey","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","VerificationMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","passwordHint","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isVerificationMonetizationModalOpen","openVerificationMonetizationModal","closeVerificationMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","graph","create","topText","linkText","withNodes","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","prevThreadId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","STAR_PATH","Path2D","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","rotate","restore","beginPath","ellipse","hideTimeout","prevConfettiTime","leftSide","randomX","DeleteFolderDialog","Dialogs","processedHashes","downloadedHashes","cancelMediaHashDownloads","handleMediaDownloaded","clear","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","PremiumLimitReachedModal","GiveawayModal","PremiumGiftingPickerModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isPremiumGiftingPickerModal","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","prefix","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","ModalContainer","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","IS_MULTITAB_SUPPORTED","REACTION_POSITIONS","durationShift","PROGRESS_POSITIONS","positions","velocityX","velocityY","generateRandomProgressPositions","presetSettings","shiftX","cos","atan2","shiftY","purpose","boostChannelId","boostChannel","isOnlyForNewSubscribers","buildStarsTransactionCustomPeer","subtitleKey","customPeerAvatarColor","formatStarsTransactionAmount","transactionId","isMyGift","isPrizeStars"],"sourceRoot":""}