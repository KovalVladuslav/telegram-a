{"version":3,"file":"6930.98b3cc19d21459eb9a87.js","mappings":"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","sources":["webpack://telegram-t/./src/components/main/premium/StarsGiftModal.module.scss?c1d3","webpack://telegram-t/./src/components/main/premium/StarsGiftModal.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.module.scss?3156","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.module.scss?bbd4","webpack://telegram-t/./src/components/modals/stars/BalanceBlock.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.module.scss?74b5","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.module.scss?605d","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.module.scss?b947","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.module.scss?a215","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.module.scss?5025","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.tsx","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.module.scss?b8f3","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.module.scss?80b2","webpack://telegram-t/./src/components/common/PeerBadge.module.scss?732c","webpack://telegram-t/./src/components/common/PeerBadge.tsx","webpack://telegram-t/./src/components/common/Sparkles.module.scss?15c2","webpack://telegram-t/./src/components/common/Sparkles.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.module.scss?7af2","webpack://telegram-t/./src/components/modals/common/TableInfoModal.module.scss?4f33","webpack://telegram-t/./src/components/modals/common/TableInfoModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.module.scss?22c9","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.tsx","webpack://telegram-t/./src/global/helpers/payments.ts","webpack://telegram-t/./src/util/objects/customPeer.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"uH8fqafl\",\"root\":\"aj6xpTC3\",\"main\":\"Iqf5K4mR\",\"headerInfo\":\"IOY_ESbV\",\"logo\":\"Pl_aaBw0\",\"logoBackground\":\"D5l7UeFq\",\"description\":\"ecZztcn2\",\"section\":\"t18TOwVL\",\"header\":\"eRV8zao3\",\"starHeaderText\":\"TTmBv6nH\",\"hiddenHeader\":\"keGf2mX9\",\"closeButton\":\"tlkzyZXX\",\"avatar\":\"P0oMhbon\",\"center\":\"Ri1FZd1z\",\"secondaryInfo\":\"TWNeq00k\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiStarTopupOption, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle } from '../../../global/helpers';\nimport {\n  selectTabState, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport SafeLink from '../../common/SafeLink';\nimport StarTopupOptionList from '../../modals/stars/StarTopupOptionList';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './StarsGiftModal.module.scss';\n\nimport StarLogo from '../../../assets/icons/StarLogo.svg';\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  isCompleted?: boolean;\n  starsGiftOptions?: ApiStarTopupOption[] | undefined;\n  forUserId?: string;\n  user?: ApiUser;\n};\n\nconst StarsGiftModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isCompleted,\n  starsGiftOptions,\n  forUserId,\n  user,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n\n  const {\n    closeStarsGiftModal, openInvoice, requestConfetti,\n  } = getActions();\n\n  const oldLang = useOldLang();\n\n  const [selectedOption, setSelectedOption] = useState<ApiStarTopupOption | undefined>();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n    }\n  }, [isOpen]);\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isCompleted) {\n      showConfetti();\n    }\n  }, [isCompleted, showConfetti]);\n\n  const handleClick = useLastCallback((option: ApiStarTopupOption) => {\n    setSelectedOption(option);\n    if (user) {\n      openInvoice({\n        type: 'starsgift',\n        userId: forUserId!,\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    } else {\n      openInvoice({\n        type: 'stars',\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    }\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClose = useLastCallback(() => {\n    closeStarsGiftModal();\n  });\n\n  function renderGiftTitle() {\n    if (isCompleted) {\n      return user ? renderText(oldLang('Notification.StarsGift.SentYou',\n        formatCurrencyAsString(selectedOption!.amount, selectedOption!.currency, oldLang.code)), ['simple_markdown'])\n        : renderText(oldLang('StarsAcquiredInfo', selectedOption?.stars), ['simple_markdown']);\n    }\n\n    return user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars');\n  }\n\n  const bottomText = useMemo(() => {\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />,\n      parts[1],\n    ];\n  }, [oldLang]);\n\n  return (\n    <Modal\n      className={buildClassName(styles.modalDialog, styles.root)}\n      dialogRef={dialogRef}\n      onClose={handleClose}\n      isOpen={isOpen}\n    >\n      <div className={styles.main} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeStarsGiftModal()}\n          ariaLabel={oldLang('Close')}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars')}\n          </h2>\n        </div>\n        <div className={styles.headerInfo}>\n          {user ? (\n            <>\n              <Avatar\n                size=\"huge\"\n                peer={user}\n                className={styles.avatar}\n              />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          ) : (\n            <>\n              <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          )}\n        </div>\n        <h2 className={buildClassName(styles.headerText, styles.center)}>\n          {renderGiftTitle()}\n        </h2>\n        <p className={styles.description}>\n          {user ? renderText(\n            oldLang('ActionGiftStarsSubtitle', getSenderTitle(oldLang, user)), ['simple_markdown'],\n          ) : oldLang('Stars.Purchase.GetStarsInfo')}\n        </p>\n        <div className={styles.section}>\n          {starsGiftOptions && (\n            <StarTopupOptionList\n              options={starsGiftOptions}\n              onClick={handleClick}\n            />\n          )}\n          <div className={styles.secondaryInfo}>\n            {bottomText}\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    starsGiftOptions, forUserId, isCompleted,\n  } = selectTabState(global).starsGiftModal || {};\n\n  const user = forUserId ? selectUser(getGlobal(), forUserId) : undefined;\n\n  return {\n    isCompleted,\n    starsGiftOptions,\n    forUserId,\n    user,\n  };\n})(StarsGiftModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"s3k01dTm\",\"transition\":\"BNA0_b5j\",\"main\":\"Oadi16vt\",\"filter\":\"z84KbvhX\",\"title\":\"Jnsrau29\",\"buttons\":\"NnVyYB32\",\"picker\":\"cuI2eDIY\",\"avatars\":\"ILtw_aNL\",\"center\":\"eIfMzHv5\",\"description\":\"FlNJWZ5P\",\"premiumFeatures\":\"xIv0Yaur\",\"options\":\"eNJRXn6P\",\"button\":\"KDNKXBp5\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  filterUsersByName, isDeletedUser, isUserBot,\n} from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\nimport styles from './StarsGiftingPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n  activeListIds?: string[];\n  archivedListIds?: string[];\n}\n\nconst StarsGiftingPickerModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  userIds,\n}) => {\n  const { closeStarsGiftingModal, openStarsGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const combinedIds = [\n      ...(userIds || []),\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ];\n\n    const filteredContactIds = filterUsersByName(combinedIds, usersById, searchQuery);\n\n    return sortChatIds(unique(filteredContactIds).filter((id) => {\n      const user = usersById[id];\n\n      if (!user) {\n        return false;\n      }\n\n      return !user.isSupport\n        && !isUserBot(user) && !isDeletedUser(user)\n        && id !== currentUserId && id !== SERVICE_NOTIFICATIONS_USER_ID;\n    }));\n  }, [currentUserId, searchQuery, userIds, activeListIds, archivedListIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedId?: string) => {\n    if (newSelectedId?.length) {\n      openStarsGiftModal({ forUserId: newSelectedId });\n    }\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeStarsGiftingModal}\n      title={oldLang('GiftStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={oldLang('Continue')}\n      onEnter={closeStarsGiftingModal}\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        onSelectedIdChange={handleSelectedUserIdsChange}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    chats: {\n      listIds,\n    },\n    currentUserId,\n  } = global;\n\n  return {\n    userIds: global.contactList?.userIds,\n    activeListIds: listIds.active,\n    archivedListIds: listIds.archived,\n    currentUserId,\n  };\n})(StarsGiftingPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TtE8LQNJ\",\"transition\":\"nXQS4E59\",\"main\":\"JuWZY1ds\",\"container\":\"mnhBs1uK\",\"section\":\"lYkNd_gb\",\"sectionTitle\":\"FF8gm7MP\",\"secondaryInfo\":\"fBublGG8\",\"logo\":\"sjhpNB8l\",\"logoBackground\":\"jjESKN3H\",\"headerHext\":\"xbpAOr37\",\"description\":\"teXilLxe\",\"header\":\"fnhXotO2\",\"starHeaderText\":\"iUwego5s\",\"hiddenHeader\":\"DZk6d6hF\",\"closeButton\":\"piD1PXHW\",\"balance\":\"LitvQduT\",\"smallerText\":\"rUnPcfmE\",\"balanceBottom\":\"F5BTkZ9G\",\"modalBalance\":\"t8tMrx3y\",\"starButton\":\"oOt4VBD2\",\"paymentContent\":\"OReEUNTV\",\"paymentImages\":\"oKorQYTC\",\"paymentPhoto\":\"HGTrEtUF\",\"avatarStar\":\"Wu10dXoa\",\"paymentImageBackground\":\"os8jb_qv\",\"paymentAmount\":\"sd2jk3Hn\",\"paymentButton\":\"VzR5cibf\",\"paymentButtonStar\":\"Uhg7yWxK\",\"transactions\":\"Qvc0fTTH\",\"subscriptions\":\"IX5BhCUF\",\"tabs\":\"KZVEyKOX\",\"disclaimer\":\"bpVifdwH\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarsBalanceModal.module.scss';\n\ntype OwnProps = {\n  balance: number;\n  className?: string;\n};\n\nconst BalanceBlock = ({ balance, className }: OwnProps) => {\n  const lang = useOldLang();\n\n  return (\n    <div className={buildClassName(styles.balance, className)}>\n      <span className={styles.smallerText}>{lang('StarsBalance')}</span>\n      <div className={styles.balanceBottom}>\n        <StarIcon type=\"gold\" size=\"middle\" />\n        {formatInteger(balance)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(BalanceBlock);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXnbeQxP\",\"info\":\"zLaaDX3c\",\"status\":\"HbF2qTB2\",\"statusPricing\":\"AveGvpdV\",\"amount\":\"_CBiOQcv\",\"title\":\"k9ZIv5Pd\",\"description\":\"FlRlxMx2\",\"statusPeriod\":\"MRrP7Oew\",\"statusEnded\":\"pRHwfr8m\",\"preview\":\"t6Syyhzd\",\"subscriptionStar\":\"ftlbevPm\"};","import React, { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiStarsSubscription,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport { getSenderTitle } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatDateToString } from '../../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../../util/textFormat';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\n\nimport styles from './StarsSubscriptionItem.module.scss';\n\ntype OwnProps = {\n  subscription: ApiStarsSubscription;\n};\n\nfunction selectProvidedPeer(peerId: string) {\n  return (global: GlobalState) => (\n    selectPeer(global, peerId)\n  );\n}\n\nconst StarsSubscriptionItem = ({ subscription }: OwnProps) => {\n  const { openStarsSubscriptionModal } = getActions();\n  const {\n    peerId, pricing, until, isCancelled,\n  } = subscription;\n  const lang = useOldLang();\n\n  const peer = useSelector(selectProvidedPeer(peerId))!;\n\n  const handleClick = useLastCallback(() => {\n    openStarsSubscriptionModal({ subscription });\n  });\n\n  if (!peer) {\n    return undefined;\n  }\n  const hasExpired = until < Date.now() / 1000;\n  const formattedDate = formatDateToString(until * 1000, lang.code, true, 'long');\n\n  return (\n    <div className={styles.root} onClick={handleClick}>\n      <div className={styles.preview}>\n        <Avatar size=\"medium\" peer={peer} />\n        <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{getSenderTitle(lang, peer)}</h3>\n        <p className={styles.description}>\n          {lang(\n            hasExpired ? 'StarsSubscriptionExpired'\n              : isCancelled ? 'StarsSubscriptionExpires' : 'StarsSubscriptionRenews',\n            formattedDate,\n          )}\n        </p>\n      </div>\n      <div className={styles.status}>\n        {(isCancelled || hasExpired) ? (\n          <div className={styles.statusEnded}>\n            {lang(hasExpired ? 'StarsSubscriptionStatusExpired' : 'StarsSubscriptionStatusCancelled')}\n          </div>\n        ) : (\n          <>\n            <div className={styles.statusPricing}>\n              <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n              <span className={styles.amount}>\n                {formatInteger(pricing.amount)}\n              </span>\n            </div>\n            <div className={styles.statusPeriod}>{lang('StarsParticipantSubscriptionPerMonth')}</div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsSubscriptionItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jQkp75Gb\",\"preview\":\"OYGSN3PF\",\"count\":\"KX1yz2Jy\",\"thumb\":\"EvinKr5k\",\"noOutline\":\"KSAAsUDv\",\"itemCount1\":\"GxDajfX_\",\"itemCount2\":\"jXuZoxq8\",\"itemCount3\":\"TPn3XGHJ\",\"blurry\":\"hWZuxLS8\",\"full\":\"w56QPFhl\",\"fadeIn\":\"ds43W8Wq\"};","import React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMediaExtendedPreview, BoughtPaidMedia } from '../../../../api/types';\n\nimport { getMediaHash, getMediaThumbUri } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Icon from '../../../common/icons/Icon';\nimport MediaSpoiler from '../../../common/MediaSpoiler';\n\nimport styles from './PaidMediaThumb.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  media: ApiMediaExtendedPreview[] | BoughtPaidMedia[];\n  isTransactionPreview?: boolean;\n  onClick?: NoneToVoidFunction;\n};\n\nconst THUMB_LIMIT = 3;\nconst PREVIEW_THUMB_LIMIT = 2;\n\nconst PaidMediaThumb = ({\n  media, className, isTransactionPreview, onClick,\n}: OwnProps) => {\n  const count = Math.min(media.length, isTransactionPreview ? PREVIEW_THUMB_LIMIT : THUMB_LIMIT);\n  const isLocked = 'mediaType' in media[0];\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        styles[`itemCount${count}`],\n        isTransactionPreview && styles.preview,\n        className,\n      )}\n      dir=\"rtl\"\n      onClick={onClick}\n    >\n      {media.slice(0, count).reverse().map((item, i, arr) => {\n        const realIndex = arr.length - i - 1;\n        return 'mediaType' in item ? (\n          <MediaSpoiler\n            className={styles.thumb}\n            isVisible\n            width={item.width}\n            height={item.height}\n            thumbDataUri={item.thumbnail?.dataUri}\n          />\n        ) : (\n          <SingleMediaThumb\n            className={buildClassName(isTransactionPreview && realIndex > 0 && styles.noOutline)}\n            boughtMedia={item}\n            index={realIndex}\n          />\n        );\n      })}\n      {isLocked && (\n        <div className={styles.count}>\n          <Icon name=\"stars-lock\" />\n          {media.length > 1 ? media.length : ''}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SingleMediaThumb({\n  boughtMedia,\n  index,\n  className,\n}: {\n  boughtMedia: BoughtPaidMedia;\n  index?: number;\n  className?: string;\n}) {\n  const media = (boughtMedia.video || boughtMedia.photo)!;\n  const mediaHash = getMediaHash(media, 'pictogram');\n  const thumb = getMediaThumbUri(media);\n\n  const mediaBlob = useMedia(mediaHash);\n\n  return (\n    <div className={buildClassName(styles.thumb, index !== undefined && `stars-transaction-media-${index}`, className)}>\n      {thumb && <img className={styles.blurry} src={thumb} alt=\"\" />}\n      {mediaBlob && <img className={styles.full} src={mediaBlob} alt=\"\" />}\n    </div>\n  );\n}\n\nexport default memo(PaidMediaThumb);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aHAxv_Jg\",\"info\":\"oyYrn3II\",\"stars\":\"K5lc75ku\",\"amount\":\"QLQPuLAr\",\"title\":\"e0pK8CJ_\",\"description\":\"xbERdDMQ\",\"date\":\"l6CwQ0Ev\",\"positive\":\"P_42_ZWR\",\"negative\":\"TGjnLJfH\",\"preview\":\"cnjGihOT\",\"subscriptionStar\":\"z43YvnDX\"};","import React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransaction,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { CustomPeer } from '../../../../types';\n\nimport { getSenderTitle } from '../../../../global/helpers';\nimport { buildStarsTransactionCustomPeer, formatStarsTransactionAmount } from '../../../../global/helpers/payments';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_PREMIUM } from '../../../../util/objects/customPeer';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionItem.module.scss';\n\ntype OwnProps = {\n  transaction: ApiStarsTransaction;\n  className?: string;\n};\n\nfunction selectOptionalPeer(peerId?: string) {\n  return (global: GlobalState) => (\n    peerId ? selectPeer(global, peerId) : undefined\n  );\n}\n\nconst StarsTransactionItem = ({ transaction, className }: OwnProps) => {\n  const { openStarsTransactionModal } = getActions();\n  const {\n    date,\n    stars,\n    photo,\n    peer: transactionPeer,\n    extendedMedia,\n    subscriptionPeriod,\n  } = transaction;\n  const lang = useOldLang();\n\n  const peerId = transactionPeer.type === 'peer' ? transactionPeer.id : undefined;\n  const peer = useSelector(selectOptionalPeer(peerId));\n\n  const data = useMemo(() => {\n    let title = (() => {\n      if (transaction.extendedMedia) return lang('StarMediaPurchase');\n      if (transaction.subscriptionPeriod) return lang('StarSubscriptionPurchase');\n      if (transaction.isReaction) return lang('StarsReactionsSent');\n\n      return transaction.title;\n    })();\n    let description;\n    let status: string | undefined;\n    let avatarPeer: ApiPeer | CustomPeer | undefined;\n\n    if (transaction.peer.type === 'peer') {\n      description = peer && getSenderTitle(lang, peer);\n      avatarPeer = peer || CUSTOM_PEER_PREMIUM;\n    } else {\n      const customPeer = buildStarsTransactionCustomPeer(transaction.peer);\n      title = customPeer.title || lang(customPeer.titleKey!);\n      description = lang(customPeer.subtitleKey!);\n      avatarPeer = customPeer;\n    }\n\n    if (transaction.photo) {\n      avatarPeer = undefined;\n    }\n\n    if (transaction.isRefund) {\n      status = lang('StarsRefunded');\n    }\n\n    if (transaction.hasFailed) {\n      status = lang('StarsFailed');\n    }\n\n    if (transaction.isPending) {\n      status = lang('StarsPending');\n    }\n\n    return {\n      title,\n      description,\n      avatarPeer,\n      status,\n    };\n  }, [lang, peer, transaction]);\n\n  const handleClick = useLastCallback(() => {\n    openStarsTransactionModal({ transaction });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} onClick={handleClick}>\n      <div className={styles.preview}>\n        {extendedMedia ? <PaidMediaThumb media={extendedMedia} isTransactionPreview />\n          : <Avatar size=\"medium\" webPhoto={photo} peer={data.avatarPeer} />}\n        {Boolean(subscriptionPeriod) && (\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n        )}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{data.title}</h3>\n        <p className={styles.description}>{data.description}</p>\n        <p className={styles.date}>\n          {formatDateTimeToString(date * 1000, lang.code, true)}\n          {data.status && ` — (${data.status})`}\n        </p>\n      </div>\n      <div className={styles.stars}>\n        <span className={buildClassName(styles.amount, stars < 0 ? styles.negative : styles.positive)}>\n          {formatStarsTransactionAmount(stars)}\n        </span>\n        <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsTransactionItem);\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStarTopupOption } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Modal from '../../ui/Modal';\nimport TabList, { type TabWithProperties } from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from './BalanceBlock';\nimport StarTopupOptionList from './StarTopupOptionList';\nimport StarsSubscriptionItem from './subscription/StarsSubscriptionItem';\nimport StarsTransactionItem from './transaction/StarsTransactionItem';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarLogo from '../../../assets/icons/StarLogo.svg';\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nconst TRANSACTION_TYPES = ['all', 'inbound', 'outbound'] as const;\nconst TRANSACTION_TABS: TabWithProperties[] = [\n  { title: 'StarsTransactionsAll' },\n  { title: 'StarsTransactionsIncoming' },\n  { title: 'StarsTransactionsOutgoing' },\n];\nconst TRANSACTION_ITEM_CLASS = 'StarsTransactionItem';\n\nexport type OwnProps = {\n  modal: TabState['starsBalanceModal'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  canBuyPremium?: boolean;\n};\n\nconst StarsBalanceModal = ({\n  modal, starsBalanceState, canBuyPremium,\n}: OwnProps & StateProps) => {\n  const {\n    closeStarsBalanceModal, loadStarsTransactions, openStarsGiftingModal, openInvoice,\n  } = getActions();\n\n  const { balance, history, subscriptions } = starsBalanceState || {};\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\n  const [areBuyOptionsShown, showBuyOptions, hideBuyOptions] = useFlag();\n\n  const isOpen = Boolean(modal && starsBalanceState);\n\n  const { originPayment, originReaction } = modal || {};\n\n  const ongoingTransactionAmount = originPayment?.invoice?.amount || originReaction?.amount;\n  const starsNeeded = ongoingTransactionAmount ? ongoingTransactionAmount - (balance || 0) : undefined;\n  const starsNeededText = useMemo(() => {\n    if (!starsNeeded || starsNeeded < 0) return undefined;\n    const global = getGlobal();\n\n    if (originReaction) {\n      const channel = selectChat(global, originReaction.chatId);\n      if (!channel) return undefined;\n      return oldLang('StarsNeededTextReactions', getChatTitle(oldLang, channel));\n    }\n\n    if (originPayment) {\n      const bot = selectUser(global, originPayment.botId!);\n      if (!bot) return undefined;\n      return oldLang('StarsNeededText', getUserFullName(bot));\n    }\n\n    return undefined;\n  }, [oldLang, originPayment, originReaction, starsNeeded]);\n\n  const shouldShowItems = Boolean(history?.all?.transactions.length && !originPayment && !originReaction);\n  const shouldSuggestGifting = !originPayment && !originReaction;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setSelectedTabIndex(0);\n      hideBuyOptions();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (ongoingTransactionAmount) {\n      showBuyOptions();\n      return;\n    }\n\n    hideBuyOptions();\n  }, [ongoingTransactionAmount]);\n\n  const tosText = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />,\n      parts[1],\n    ];\n  }, [isOpen, oldLang]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleLoadMoreTransactions = useLastCallback(() => {\n    loadStarsTransactions({\n      type: TRANSACTION_TYPES[selectedTabIndex],\n    });\n  });\n\n  const openStarsGiftingModalHandler = useLastCallback(() => {\n    openStarsGiftingModal({});\n  });\n\n  const handleBuyStars = useLastCallback((option: ApiStarTopupOption) => {\n    openInvoice({\n      type: 'stars',\n      stars: option.stars,\n      currency: option.currency,\n      amount: option.amount,\n    });\n  });\n\n  return (\n    <Modal className={styles.root} isOpen={isOpen} onClose={closeStarsBalanceModal}>\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeStarsBalanceModal()}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <BalanceBlock balance={balance || 0} className={styles.modalBalance} />\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {oldLang('TelegramStars')}\n          </h2>\n        </div>\n        <div className={styles.section}>\n          <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n          <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n          <h2 className={styles.headerText}>\n            {starsNeeded ? oldLang('StarsNeededTitle', ongoingTransactionAmount) : oldLang('TelegramStars')}\n          </h2>\n          <div className={styles.description}>\n            {renderText(\n              starsNeededText || oldLang('TelegramStarsInfo'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          {canBuyPremium && !areBuyOptionsShown && (\n            <Button\n              className={styles.starButton}\n              onClick={showBuyOptions}\n            >\n              {oldLang('Star.List.BuyMoreStars')}\n            </Button>\n          )}\n          {canBuyPremium && !areBuyOptionsShown && shouldSuggestGifting && (\n            <Button\n              className={buildClassName(styles.starButton, 'settings-main-menu-star')}\n              color=\"translucent\"\n              onClick={openStarsGiftingModalHandler}\n            >\n              <StarIcon className=\"icon\" type=\"gold\" size=\"big\" />\n              {oldLang('TelegramStarsGift')}\n            </Button>\n          )}\n          {areBuyOptionsShown && starsBalanceState?.topupOptions && (\n            <StarTopupOptionList\n              starsNeeded={starsNeeded}\n              options={starsBalanceState.topupOptions}\n              onClick={handleBuyStars}\n            />\n          )}\n        </div>\n        <div className={styles.secondaryInfo}>\n          {tosText}\n        </div>\n        {shouldShowItems && Boolean(subscriptions?.list.length) && (\n          <div className={styles.section}>\n            <h3 className={styles.sectionTitle}>{oldLang('StarMySubscriptions')}</h3>\n            <div className={styles.subscriptions}>\n              {subscriptions?.list.map((subscription) => (\n                <StarsSubscriptionItem\n                  key={subscription.id}\n                  subscription={subscription}\n                />\n              ))}\n            </div>\n          </div>\n        )}\n        {shouldShowItems && (\n          <div className={styles.container}>\n            <div className={styles.section}>\n              <Transition\n                name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                activeKey={selectedTabIndex}\n                renderCount={TRANSACTION_TABS.length}\n                shouldRestoreHeight\n                className={styles.transition}\n              >\n                <InfiniteScroll\n                  onLoadMore={handleLoadMoreTransactions}\n                  items={history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions}\n                  scrollContainerClosest={`.${styles.main}`}\n                  itemSelector={`.${TRANSACTION_ITEM_CLASS}`}\n                  className={styles.transactions}\n                  noFastList\n                >\n                  {history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions.map((transaction) => (\n                    <StarsTransactionItem\n                      key={`${transaction.id}-${transaction.isRefund}`}\n                      transaction={transaction}\n                      className={TRANSACTION_ITEM_CLASS}\n                    />\n                  ))}\n                </InfiniteScroll>\n              </Transition>\n            </div>\n            <TabList\n              className={styles.tabs}\n              tabClassName={styles.tab}\n              activeTab={selectedTabIndex}\n              tabs={TRANSACTION_TABS}\n              onSwitchTab={setSelectedTabIndex}\n            />\n          </div>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      starsBalanceState: global.stars,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(StarsBalanceModal));\n","import React, { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatInviteInfo, ApiMediaExtendedPreview, ApiMessage, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\n\nimport { getChatTitle, getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectTabState, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport StarIcon from '../../common/icons/StarIcon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport BalanceBlock from './BalanceBlock';\nimport PaidMediaThumb from './transaction/PaidMediaThumb';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['isStarPaymentModalOpen'];\n};\n\ntype StateProps = {\n  payment?: TabState['payment'];\n  starsBalanceState?: GlobalState['stars'];\n  bot?: ApiUser;\n  paidMediaMessage?: ApiMessage;\n  paidMediaChat?: ApiChat;\n  inviteInfo?: ApiChatInviteInfo;\n};\n\nconst StarPaymentModal = ({\n  modal,\n  bot,\n  starsBalanceState,\n  payment,\n  paidMediaMessage,\n  paidMediaChat,\n  inviteInfo,\n}: OwnProps & StateProps) => {\n  const { closePaymentModal, openStarsBalanceModal, sendStarPaymentForm } = getActions();\n  const [isLoading, markLoading, unmarkLoading] = useFlag();\n  const isOpen = Boolean(modal && starsBalanceState);\n\n  const photo = payment?.invoice?.photo;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkLoading();\n    }\n  }, [isOpen]);\n\n  const descriptionText = useMemo(() => {\n    if (!payment?.invoice) {\n      return '';\n    }\n\n    const botName = getUserFullName(bot);\n    const starsText = oldLang('Stars.Intro.PurchasedText.Stars', payment.invoice.amount);\n\n    if (paidMediaMessage) {\n      const extendedMedia = paidMediaMessage.content.paidMedia!.extendedMedia as ApiMediaExtendedPreview[];\n      const areAllPhotos = extendedMedia.every((media) => !media.duration);\n      const areAllVideos = extendedMedia.every((media) => !!media.duration);\n\n      const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', extendedMedia.length)\n        : areAllVideos ? oldLang('Stars.Transfer.Videos', extendedMedia.length)\n          : oldLang('Media', extendedMedia.length);\n\n      const channelTitle = getChatTitle(oldLang, paidMediaChat!);\n      return oldLang('Stars.Transfer.UnlockInfo', [mediaText, channelTitle, starsText]);\n    }\n\n    if (inviteInfo) {\n      return lang('StarsSubscribeText', {\n        chat: inviteInfo.title,\n        amount: payment.invoice.amount,\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n        pluralValue: payment.invoice.amount,\n      });\n    }\n\n    return oldLang('Stars.Transfer.Info', [payment.invoice.title, botName, starsText]);\n  }, [payment?.invoice, bot, oldLang, lang, paidMediaMessage, paidMediaChat, inviteInfo]);\n\n  const disclaimerText = useMemo(() => {\n    if (inviteInfo) {\n      return lang('StarsSubscribeInfo', {\n        link: <SafeLink url={lang('StarsSubscribeInfoLink')} text={lang('StarsSubscribeInfoLinkText')} />,\n      }, {\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [inviteInfo, lang]);\n\n  const inviteCustomPeer = useMemo(() => {\n    if (!inviteInfo) {\n      return undefined;\n    }\n\n    return getCustomPeerFromInvite(inviteInfo);\n  }, [inviteInfo]);\n\n  const handlePayment = useLastCallback(() => {\n    const price = payment?.invoice?.amount;\n    const balance = starsBalanceState?.balance;\n    if (price === undefined || balance === undefined) {\n      return;\n    }\n\n    if (price > balance) {\n      openStarsBalanceModal({\n        originPayment: payment,\n      });\n      return;\n    }\n\n    sendStarPaymentForm();\n    markLoading();\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.paymentContent}\n      isOpen={isOpen}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={closePaymentModal}\n    >\n      <BalanceBlock balance={starsBalanceState?.balance || 0} className={styles.modalBalance} />\n      <div className={styles.paymentImages} dir={oldLang.isRtl ? 'ltr' : 'rtl'}>\n        {paidMediaMessage ? (\n          <PaidMediaThumb media={paidMediaMessage.content.paidMedia!.extendedMedia} />\n        ) : inviteCustomPeer ? (\n          <>\n            <Avatar className={styles.paymentPhoto} peer={inviteCustomPeer} size=\"giant\" />\n            <StarIcon type=\"gold\" size=\"adaptive\" className={styles.avatarStar} />\n          </>\n        ) : (\n          <>\n            <Avatar peer={bot} size=\"giant\" />\n            {photo && <Avatar className={styles.paymentPhoto} webPhoto={photo} size=\"giant\" />}\n          </>\n        )}\n        <img className={styles.paymentImageBackground} src={StarsBackground} alt=\"\" draggable={false} />\n      </div>\n      <h2 className={styles.headerText}>\n        {inviteCustomPeer ? oldLang('StarsSubscribeTitle') : oldLang('StarsConfirmPurchaseTitle')}\n      </h2>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <Button className={styles.paymentButton} size=\"smaller\" onClick={handlePayment} isLoading={isLoading}>\n        {oldLang('Stars.Transfer.Pay')}\n        <div className={styles.paymentAmount}>\n          {payment?.invoice?.amount}\n          <StarIcon className={styles.paymentButtonStar} size=\"small\" />\n        </div>\n      </Button>\n      {disclaimerText && (\n        <div className={buildClassName(styles.disclaimer, styles.smallerText)}>\n          {disclaimerText}\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const payment = selectTabState(global).payment;\n    const bot = payment?.botId ? selectUser(global, payment.botId) : undefined;\n\n    const messageInputInvoice = payment.inputInvoice?.type === 'message' ? payment.inputInvoice : undefined;\n    const message = messageInputInvoice\n      ? selectChatMessage(global, messageInputInvoice.chatId, messageInputInvoice.messageId) : undefined;\n    const chat = messageInputInvoice ? selectChat(global, messageInputInvoice.chatId) : undefined;\n    const isPaidMedia = message?.content.paidMedia;\n\n    const inviteInputInvoice = payment.inputInvoice?.type === 'chatInviteSubscription'\n      ? payment.inputInvoice : undefined;\n    const inviteInfo = inviteInputInvoice?.inviteInfo;\n\n    return {\n      bot,\n      starsBalanceState: global.stars,\n      payment,\n      paidMediaMessage: isPaidMedia ? message : undefined,\n      paidMediaChat: isPaidMedia ? chat : undefined,\n      inviteInfo,\n    };\n  },\n)(StarPaymentModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"IzhfRIWu\",\"positive\":\"jvBZSrpd\",\"negative\":\"xDyq9cc0\",\"header\":\"qBOIq6Jn\",\"starsHeader\":\"VqKkGnpy\",\"amount\":\"sso9uZM6\",\"title\":\"ZZAj3hj7\",\"description\":\"NuWOY7ED\",\"tid\":\"tMF8VIOM\",\"footer\":\"KgzPpgS6\",\"starsBackground\":\"nML8IQqX\",\"copyIcon\":\"voCttFzS\",\"mediaPreview\":\"C5r59yiV\",\"starTitle\":\"KIlRQemn\",\"subtitle\":\"mFYcIYMJ\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransactionPeer, ApiSticker, ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageLink, getUserFullName } from '../../../../global/helpers';\nimport { buildStarsTransactionCustomPeer, formatStarsTransactionAmount } from '../../../../global/helpers/payments';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForStars,\n  selectPeer, selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport SafeLink from '../../../common/SafeLink';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionModal.module.scss';\n\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsTransactionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  user?: ApiUser;\n  canPlayAnimatedEmojis?: boolean;\n  starGiftSticker?: ApiSticker;\n};\n\nconst StarsTransactionModal: FC<OwnProps & StateProps> = ({\n  modal, peer, user, canPlayAnimatedEmojis, starGiftSticker,\n}) => {\n  const { showNotification, openMediaViewer, closeStarsTransactionModal } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { transaction } = modal || {};\n\n  const handleOpenMedia = useLastCallback(() => {\n    const media = transaction?.extendedMedia;\n    if (!media) return;\n\n    openMediaViewer({\n      origin: MediaViewerOrigin.StarsTransaction,\n      standaloneMedia: media.flatMap((item) => Object.values(item)),\n    });\n  });\n\n  const giftEntryAboutText = useMemo(() => {\n    const subtitleText = oldLang('lng_credits_box_history_entry_gift_in_about');\n    const subtitleTextParts = subtitleText.split('{link}');\n\n    return (\n      <>\n        {subtitleTextParts[0]}\n        <SafeLink\n          url={oldLang('lng_credits_box_history_entry_gift_about_url')}\n          text={oldLang('GiftStarsSubtitleLinkName')}\n        >\n          {renderText(oldLang('GiftStarsSubtitleLinkName'), ['simple_markdown'])}\n        </SafeLink>\n        {subtitleTextParts[1]}\n      </>\n    );\n  }, [oldLang]);\n\n  const giftOutAboutText = useMemo(() => {\n    return lang(\n      'CreditsBoxHistoryEntryGiftOutAbout',\n      {\n        user: <strong>{user ? getUserFullName(user) : ''}</strong>,\n        link: (\n          <SafeLink\n            url={oldLang('lng_credits_box_history_entry_gift_about_url')}\n            text={oldLang('GiftStarsSubtitleLinkName')}\n          >\n            {renderText(oldLang('GiftStarsSubtitleLinkName'), ['simple_markdown'])}\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, user, oldLang]);\n\n  const starModalData = useMemo(() => {\n    if (!transaction) {\n      return undefined;\n    }\n\n    const { isGift, isPrizeStars, photo } = transaction;\n\n    const customPeer = (transaction.peer && transaction.peer.type !== 'peer'\n        && buildStarsTransactionCustomPeer(transaction.peer)) || undefined;\n\n    const peerId = transaction.peer?.type === 'peer' ? transaction.peer.id : undefined;\n    const toName = transaction.peer && oldLang(getStarsPeerTitleKey(transaction.peer));\n\n    const title = (() => {\n      if (transaction.extendedMedia) return oldLang('StarMediaPurchase');\n      if (transaction.subscriptionPeriod) return oldLang('StarSubscriptionPurchase');\n      if (transaction.isReaction) return oldLang('StarsReactionsSent');\n\n      if (customPeer) return customPeer.title || oldLang(customPeer.titleKey!);\n\n      return transaction.title;\n    })();\n\n    const messageLink = peer && transaction.messageId\n      ? getMessageLink(peer, undefined, transaction.messageId) : undefined;\n\n    const media = transaction.extendedMedia;\n\n    const mediaAmount = media?.length || 0;\n    const areAllPhotos = media?.every((m) => !m.video);\n    const areAllVideos = media?.every((m) => !m.photo);\n\n    const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', mediaAmount)\n      : areAllVideos ? oldLang('Stars.Transfer.Videos', mediaAmount)\n        : oldLang('Media', mediaAmount);\n\n    const description = transaction.description || (media ? mediaText : undefined);\n\n    const shouldDisplayAvatar = !media && !isGift && !isPrizeStars;\n    const avatarPeer = !photo ? (peer || customPeer) : undefined;\n\n    const header = (\n      <div className={buildClassName(styles.header, styles.starsHeader)}>\n        {media && (\n          <PaidMediaThumb\n            className={buildClassName(styles.mediaPreview, 'transaction-media-preview')}\n            media={media}\n            onClick={handleOpenMedia}\n          />\n        )}\n        {(isGift || isPrizeStars) && starGiftSticker && (\n          <AnimatedIconFromSticker\n            key={transaction.id}\n            sticker={starGiftSticker}\n            play={canPlayAnimatedEmojis}\n            noLoop\n            nonInteractive\n          />\n        )}\n        {shouldDisplayAvatar && (\n          <Avatar peer={avatarPeer} webPhoto={photo} size=\"jumbo\" />\n        )}\n        <img\n          className={buildClassName(styles.starsBackground)}\n          src={StarsBackground}\n          alt=\"\"\n          draggable={false}\n        />\n        {title && <h1 className={styles.title}>{title}</h1>}\n        {(isGift || isPrizeStars) && (\n          <h1 className={buildClassName(styles.title, styles.starTitle)}>\n            {isPrizeStars ? oldLang('StarsGiveawayPrizeReceived')\n              : transaction?.isMyGift ? oldLang('StarsGiftSent') : oldLang('StarsGiftReceived')}\n          </h1>\n        )}\n        <p className={styles.description}>{description}</p>\n        <p className={styles.amount}>\n          <span className={buildClassName(styles.amount, transaction.stars < 0 ? styles.negative : styles.positive)}>\n            {formatStarsTransactionAmount(transaction.stars)}\n          </span>\n          <StarIcon type=\"gold\" size=\"middle\" />\n        </p>\n        {isGift && (\n          <span className={styles.subtitle}>\n            {transaction?.isMyGift ? giftOutAboutText : giftEntryAboutText}\n          </span>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    tableData.push([\n      oldLang(transaction.stars < 0 || transaction.isMyGift ? 'Stars.Transaction.To'\n        : peerId ? 'Star.Transaction.From' : 'Stars.Transaction.Via'),\n      peerId ? { chatId: peerId } : toName || '',\n    ]);\n\n    if (messageLink) {\n      tableData.push([oldLang('Stars.Transaction.Reaction.Post'), <SafeLink url={messageLink} text={messageLink} />]);\n    }\n\n    if (isPrizeStars) {\n      tableData.push(\n        [oldLang('BoostReason'), oldLang('Giveaway')],\n        [oldLang('Gift'), oldLang('Stars', transaction.stars, 'i')],\n      );\n    }\n\n    if (transaction.id && !isPrizeStars) {\n      tableData.push([\n        oldLang('Stars.Transaction.Id'),\n        (\n          <>\n            <div\n              className={styles.tid}\n              onClick={() => {\n                copyTextToClipboard(transaction.id!);\n                showNotification({\n                  message: oldLang('StarsTransactionIDCopied'),\n                });\n              }}\n            >\n              {transaction.id}\n            </div>\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </>\n        ),\n      ]);\n    }\n\n    tableData.push([\n      oldLang('Stars.Transaction.Date'),\n      formatDateTimeToString(transaction.date * 1000, oldLang.code, true),\n    ]);\n\n    const footerText = oldLang('lng_credits_box_out_about');\n    const footerTextParts = footerText.split('{link}');\n\n    const footer = (\n      <span className={styles.footer}>\n        {footerTextParts[0]}\n        <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />\n        {footerTextParts[1]}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [\n    transaction, oldLang, peer, giftOutAboutText, giftEntryAboutText, canPlayAnimatedEmojis, starGiftSticker,\n  ]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(transaction)}\n      className={styles.modal}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      buttonText={oldLang('OK')}\n      onClose={closeStarsTransactionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.transaction?.peer?.type === 'peer' && modal.transaction.peer.id;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n    const user = peerId ? selectUser(global, peerId) : undefined;\n\n    const starCount = modal?.transaction.stars;\n    const starGiftSticker = selectGiftStickerForStars(global, starCount);\n\n    return {\n      peer,\n      user,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      starGiftSticker,\n    };\n  },\n)(StarsTransactionModal));\n\nfunction getStarsPeerTitleKey(peer: ApiStarsTransactionPeer) {\n  switch (peer.type) {\n    case 'appStore':\n      return 'AppStore';\n    case 'playMarket':\n      return 'PlayMarket';\n    case 'fragment':\n      return 'Fragment';\n    case 'premiumBot':\n      return 'StarsTransactionBot';\n    case 'ads':\n      return 'StarsTransactionAds';\n    default:\n      return 'Stars.Transaction.Unsupported.Title';\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"eR_RZfGB\",\"header\":\"E3R22yAI\",\"starsHeader\":\"gLkKCjkD\",\"title\":\"qdydQHgc\",\"amount\":\"FI6rEJlK\",\"footer\":\"GMWMuWCr\",\"starsBackground\":\"zGCayu45\",\"avatarWrapper\":\"wuTMXDP9\",\"subscriptionStar\":\"enRetSny\",\"amountStar\":\"J8HIcN6k\",\"secondary\":\"oBLHWBtJ\",\"danger\":\"nkwiG25Q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport {\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\n\nimport styles from './StarsSubscriptionModal.module.scss';\n\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsSubscriptionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst StarsSubscriptionModal: FC<OwnProps & StateProps> = ({\n  modal, peer,\n}) => {\n  const {\n    closeStarsSubscriptionModal,\n    fulfillStarsSubscription,\n    changeStarsSubscription,\n    checkChatInvite,\n    loadStarStatus,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { subscription } = modal || {};\n\n  const buttonState = useMemo(() => {\n    if (!subscription) {\n      return 'hidden';\n    }\n\n    if (subscription.canRefulfill) {\n      return 'refulfill';\n    }\n\n    const isActive = subscription.until > Date.now() / 1000;\n    if (isActive && !subscription.isCancelled) {\n      return 'cancel';\n    }\n\n    if (isActive && subscription.isCancelled) {\n      return 'renew';\n    }\n\n    if (!isActive) {\n      return 'restart';\n    }\n\n    return 'ok';\n  }, [subscription]);\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!subscription) {\n      return;\n    }\n\n    switch (buttonState) {\n      case 'refulfill': {\n        fulfillStarsSubscription({ id: subscription.id });\n        break;\n      }\n      case 'restart': {\n        checkChatInvite({ hash: subscription.chatInviteHash! });\n        loadStarStatus();\n        break;\n      }\n      case 'renew': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: false });\n        break;\n      }\n      case 'cancel': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: true });\n        break;\n      }\n    }\n    closeStarsSubscriptionModal();\n  });\n\n  const starModalData = useMemo(() => {\n    if (!subscription || !peer) {\n      return undefined;\n    }\n\n    const {\n      pricing, until, isCancelled, canRefulfill,\n    } = subscription;\n\n    const header = (\n      <div className={buildClassName(styles.header, styles.starsHeader)}>\n        <div className={styles.avatarWrapper}>\n          <Avatar peer={peer} size=\"jumbo\" />\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"adaptive\" />\n        </div>\n        <img\n          className={buildClassName(styles.starsBackground)}\n          src={StarsBackground}\n          alt=\"\"\n          draggable={false}\n        />\n        <h1 className={styles.title}>{oldLang('StarsSubscriptionTitle')}</h1>\n        <p className={styles.amount}>\n          {lang('StarsPerMonth', {\n            amount: pricing.amount,\n          }, {\n            withNodes: true,\n            specialReplacement: {\n              '⭐️': <StarIcon className={styles.amountStar} size=\"adaptive\" type=\"gold\" />,\n            },\n          })}\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    tableData.push([\n      oldLang('StarsSubscriptionChannel'),\n      { chatId: peer.id },\n    ]);\n\n    const hasExpired = until < Date.now() / 1000;\n    tableData.push([\n      oldLang(hasExpired ? 'StarsSubscriptionUntilExpired'\n        : isCancelled ? 'StarsSubscriptionUntilExpires' : 'StarsSubscriptionUntilRenews'),\n      formatDateTimeToString(until * 1000, oldLang.code, true),\n    ]);\n\n    const footerTos = lang('StarsTransactionTOS', {\n      link: <SafeLink url={lang('StarsTransactionTOSLink')} text={lang('StarsTransactionTOSLinkText')} />,\n    }, {\n      withNodes: true,\n    });\n\n    const footer = (\n      <span className={styles.footer}>\n        <p className={styles.secondary}>{footerTos}</p>\n        {isCancelled && (\n          <p className={styles.danger}>{oldLang('StarsSubscriptionCancelledText')}</p>\n        )}\n        {canRefulfill && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionRefulfillInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionExpiredInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && !hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionCancelInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {buttonState !== 'hidden' && (\n          <Button\n            size=\"smaller\"\n            color={buttonState === 'cancel' ? 'danger' : 'primary'}\n            isText={buttonState === 'cancel'}\n            onClick={handleButtonClick}\n          >\n            {oldLang(\n              buttonState === 'cancel' ? 'StarsSubscriptionCancel'\n                : buttonState === 'refulfill' ? 'StarsSubscriptionRefulfill'\n                  : buttonState === 'restart' ? 'StarsSubscriptionAgain'\n                    : buttonState === 'renew' ? 'StarsSubscriptionRenew' : 'OK',\n            )}\n          </Button>\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [buttonState, lang, oldLang, peer, subscription]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(subscription)}\n      className={styles.modal}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      onClose={closeStarsSubscriptionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.subscription.peerId;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    return {\n      peer,\n    };\n  },\n)(StarsSubscriptionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CuBAw2yg\",\"slider\":\"euOOAbZi\",\"sparkles\":\"_L1YQTIP\",\"progress\":\"kwK0cNPX\",\"floatingBadgeWrapper\":\"uvlMoXj0\",\"floatingBadge\":\"BGSDWAYc\",\"floatingBadgeText\":\"qqQan8uF\",\"floatingBadgeTriangle\":\"mIdJOmsB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport Sparkles from '../../common/Sparkles';\n\nimport styles from './StarSlider.module.scss';\n\ntype OwnProps = {\n  maxValue: number;\n  defaultValue: number;\n  className?: string;\n  onChange: (value: number) => void;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst StarSlider = ({\n  maxValue,\n  defaultValue,\n  className,\n  onChange,\n}: OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const floatingBadgeRef = useRef<HTMLDivElement>(null);\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < maxValue) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= maxValue) {\n        result.push(maxValue);\n        break;\n      }\n    }\n\n    return result;\n  }, [maxValue]);\n\n  const [value, setValue] = useState(0);\n\n  useEffectOnce(() => {\n    setValue(getProgress(points, defaultValue));\n  });\n\n  const updateSafeBadgePosition = useLastCallback(() => {\n    const badge = floatingBadgeRef.current;\n    if (!badge) return;\n    const parent = badge.parentElement!;\n\n    requestMeasure(() => {\n      const safeMinX = parent.offsetLeft + badge.offsetWidth / 2;\n      const safeMaxX = parent.offsetLeft + parent.offsetWidth - badge.offsetWidth / 2;\n\n      requestMutation(() => {\n        parent.style.setProperty('--_min-x', `${safeMinX}px`);\n        parent.style.setProperty('--_max-x', `${safeMaxX}px`);\n      });\n    });\n  });\n\n  useResizeObserver(floatingBadgeRef, updateSafeBadgePosition);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    setValue(newValue);\n\n    onChange(getValue(points, newValue));\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} style={`--progress: ${value / points.length}`}>\n      <div className={styles.floatingBadgeWrapper}>\n        <div className={styles.floatingBadge} ref={floatingBadgeRef}>\n          <div className={styles.floatingBadgeText}>\n            <Icon name=\"star\" className={styles.floatingBadgeIcon} />\n            <AnimatedCounter text={formatInteger(getValue(points, value))} />\n          </div>\n          <svg className={styles.floatingBadgeTriangle} width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\">\n            <defs>\n              <linearGradient id=\"StarBadgeTriangle\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"0\">\n                <stop offset=\"-50%\" stop-color=\"#FFAA00\" />\n                <stop offset=\"150%\" stop-color=\"#FFCD3A\" />\n              </linearGradient>\n            </defs>\n            <path d=\"m 28,4 v 9 c 0.0089,7.283278 -3.302215,5.319646 -6.750951,8.589815 l -5.8284,5.82843 c -0.781,0.78105 -2.0474,0.78104 -2.8284,0 L 6.7638083,21.589815 C 2.8288652,17.959047 0.04527024,20.332086 0,13 V 4 C 0,4 0.00150581,0.97697493 3,1 5.3786658,1.018266 22.594519,0.9142007 25,1 c 2.992326,0.1067311 3,3 3,3 z\" fill=\"url(#StarBadgeTriangle)\" />\n          </svg>\n        </div>\n      </div>\n      <div className={styles.progress} />\n      <Sparkles preset=\"progress\" className={styles.sparkles} />\n      <input\n        className={styles.slider}\n        type=\"range\"\n        min={0}\n        max={points.length}\n        defaultValue={getProgress(points, defaultValue)}\n        step=\"any\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const value = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return Math.round(value);\n}\n\nexport default memo(StarSlider);\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectChatMessage, selectUser } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerBadge from '../../common/PeerBadge';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport StarSlider from './StarSlider';\n\nimport styles from './PaidReactionModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['paidReactionModal'];\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  chat?: ApiChat;\n  maxAmount: number;\n  starBalance?: number;\n  defaultPrivacy?: boolean;\n};\n\ntype ReactorData = {\n  amount: number;\n  localAmount: number;\n  isMe?: boolean;\n  isAnonymous?: boolean;\n  user?: ApiUser;\n};\n\nconst MAX_TOP_REACTORS = 3;\nconst DEFAULT_STARS_AMOUNT = 50;\nconst MAX_REACTION_AMOUNT = 2500;\nconst ANONYMOUS_PEER: CustomPeer = {\n  avatarIcon: 'author-hidden',\n  customPeerAvatarColor: '#9eaab5',\n  isCustomPeer: true,\n  titleKey: 'StarsReactionAnonymous',\n};\n\nconst PaidReactionModal = ({\n  modal,\n  chat,\n  message,\n  maxAmount,\n  starBalance,\n  defaultPrivacy,\n}: OwnProps & StateProps) => {\n  const { closePaidReactionModal, addLocalPaidReaction } = getActions();\n\n  const [starsAmount, setStarsAmount] = useState(DEFAULT_STARS_AMOUNT);\n  const [isTouched, markTouched, unmarkTouched] = useFlag();\n  const [shouldShowUp, setShouldShowUp] = useState(true);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const handleAnonimityChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setShouldShowUp(e.target.checked);\n  });\n\n  const handleAmountChange = useLastCallback((value: number) => {\n    setStarsAmount(value);\n    markTouched();\n  });\n\n  useEffect(() => {\n    if (!modal) {\n      unmarkTouched();\n    }\n  }, [modal]);\n\n  useEffect(() => {\n    const currentReactor = message?.reactions?.topReactors?.find((reactor) => reactor.isMe);\n    if (currentReactor) {\n      setShouldShowUp(!currentReactor.isAnonymous);\n      return;\n    }\n\n    setShouldShowUp(defaultPrivacy || true);\n  }, [defaultPrivacy, message?.reactions?.topReactors]);\n\n  const handleSend = useLastCallback(() => {\n    if (!modal) return;\n\n    addLocalPaidReaction({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      count: starsAmount,\n      isPrivate: !shouldShowUp,\n    });\n    closePaidReactionModal();\n  });\n\n  const topReactors = useMemo(() => {\n    const global = getGlobal();\n    const all = message?.reactions?.topReactors;\n    if (!all) {\n      return undefined;\n    }\n\n    const result: ReactorData[] = [];\n    let hasMe = false;\n\n    all.forEach((reactor) => {\n      const user = reactor.peerId ? selectUser(global, reactor.peerId) : undefined;\n      if (!user && !reactor.isAnonymous && !reactor.isMe) return;\n\n      if (reactor.isMe) {\n        hasMe = true;\n      }\n\n      result.push({\n        amount: reactor.count,\n        localAmount: reactor.isMe && isTouched ? starsAmount : 0,\n        isMe: reactor.isMe,\n        isAnonymous: reactor.isAnonymous,\n        user,\n      });\n    });\n\n    if (!hasMe && isTouched) {\n      const me = selectUser(global, global.currentUserId!);\n      result.push({\n        amount: 0,\n        localAmount: starsAmount,\n        isMe: true,\n        user: me,\n      });\n    }\n\n    result.sort((a, b) => (b.amount + b.localAmount) - (a.amount + a.localAmount));\n\n    return result.slice(0, MAX_TOP_REACTORS);\n  }, [isTouched, message?.reactions?.topReactors, starsAmount]);\n\n  const chatTitle = chat && getChatTitle(oldLang, chat);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      onClose={closePaidReactionModal}\n      isSlim\n      hasAbsoluteCloseButton\n      contentClassName={styles.content}\n    >\n      {starBalance !== undefined && <BalanceBlock balance={starBalance} className={styles.modalBalance} />}\n      <StarSlider\n        className={styles.slider}\n        defaultValue={DEFAULT_STARS_AMOUNT}\n        maxValue={maxAmount}\n        onChange={handleAmountChange}\n      />\n      <h3 className={styles.title}>{oldLang('StarsReactionTitle')}</h3>\n      <div className={styles.description}>\n        {renderText(oldLang('StarsReactionText', chatTitle), ['simple_markdown', 'emoji'])}\n      </div>\n      <Separator>\n        {topReactors && <div className={styles.topLabel}>{oldLang('StarsReactionTopSenders')}</div>}\n      </Separator>\n      {topReactors && (\n        <div className={styles.top}>\n          {topReactors.map((reactor) => {\n            const countText = formatInteger(reactor.amount + reactor.localAmount);\n            const peer = (reactor.isAnonymous || !reactor.user || (reactor.isMe && !shouldShowUp))\n              ? ANONYMOUS_PEER : reactor.user;\n            const text = 'isCustomPeer' in peer ? oldLang(peer.titleKey) : getUserFullName(peer);\n            return (\n              <PeerBadge\n                className={styles.topPeer}\n                key={`${reactor.user?.id || 'anonymous'}-${countText}`}\n                peer={peer}\n                badgeText={countText}\n                badgeIcon=\"star\"\n                badgeClassName={styles.topBadge}\n                text={text}\n              />\n            );\n          })}\n        </div>\n      )}\n      <Checkbox\n        className={styles.checkbox}\n        checked={shouldShowUp}\n        onChange={handleAnonimityChange}\n        label={oldLang('StarsReactionShowMeInTopSenders')}\n      />\n      <Button\n        size=\"smaller\"\n        onClick={handleSend}\n      >\n        {lang('SendPaidReaction', { amount: starsAmount }, {\n          withNodes: true,\n          specialReplacement: {\n            '⭐️': <Icon className={styles.buttonStar} name=\"star\" />,\n          },\n        })}\n      </Button>\n      <p className={styles.disclaimer}>\n        {lang('StarsReactionTerms', {\n          link: <SafeLink text={lang('StarsReactionLinkText')} url={lang('StarsReactionLink')} />,\n        }, {\n          withNodes: true,\n        })}\n      </p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal.chatId);\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const starBalance = global.stars?.balance;\n    const maxAmount = global.appConfig?.paidReactionMaxAmount || MAX_REACTION_AMOUNT;\n    const defaultPrivacy = global.settings.paidReactionPrivacy;\n\n    return {\n      chat,\n      message,\n      starBalance,\n      maxAmount,\n      defaultPrivacy,\n    };\n  },\n)(PaidReactionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"RdhRpsCn\",\"title\":\"yzbjj73U\",\"slider\":\"xePPMXOI\",\"description\":\"BlpfdOtK\",\"modalBalance\":\"Q3560fzx\",\"topLabel\":\"bnou4CpV\",\"top\":\"QludQDKR\",\"topBadge\":\"JBF9pTUK\",\"buttonStar\":\"NJJFuym9\",\"topPeer\":\"Ty4Ud_Rd\",\"checkbox\":\"oQ5Ar48z\",\"disclaimer\":\"KRvkHeo1\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hyRfEyRz\",\"top\":\"p_Ny8jqJ\",\"badge\":\"QRrryqp4\",\"text\":\"I5jdPgFL\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer } from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport Avatar from './Avatar';\nimport Icon from './icons/Icon';\n\nimport styles from './PeerBadge.module.scss';\n\ntype OwnProps = {\n  peer: ApiPeer | CustomPeer;\n  text?: string;\n  badgeText?: string;\n  badgeIcon?: IconName;\n  className?: string;\n  badgeClassName?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst PeerBadge = ({\n  peer,\n  text,\n  badgeText,\n  badgeIcon,\n  className,\n  badgeClassName,\n  onClick,\n}: OwnProps) => {\n  return (\n    <div\n      className={buildClassName(styles.root, onClick && styles.clickable, className)}\n      onClick={onClick}\n    >\n      <div className={styles.top}>\n        <Avatar size=\"large\" peer={peer} />\n        {badgeText && (\n          <div className={buildClassName(styles.badge, badgeClassName)}>\n            {badgeIcon && <Icon name={badgeIcon} />}\n            {badgeText}\n          </div>\n        )}\n      </div>\n      {text && <p className={styles.text}>{text}</p>}\n    </div>\n  );\n};\n\nexport default memo(PeerBadge);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"fWE9Tkfe\",\"progress\":\"F0JPgXgb\",\"reaction\":\"JJ_DPeVV\",\"symbol\":\"wapdILU7\",\"sparkle\":\"AS3Scly3\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\n\nimport styles from './Sparkles.module.scss';\n\ntype ReactionParameters = {\n  preset: 'reaction';\n};\n\ntype ProgressParameters = {\n  preset: 'progress';\n};\n\ntype PresetParameters = ReactionParameters | ProgressParameters;\n\ntype OwnProps = {\n  className?: string;\n} & PresetParameters;\n\nconst SYMBOL = '✦';\nconst ANIMATION_DURATION = 5;\n\n// Values are in percents\nconst REACTION_POSITIONS = [{\n  x: 20,\n  y: 0,\n  size: 100,\n  durationShift: 10,\n}, {\n  x: 15,\n  y: 15,\n  size: 75,\n  durationShift: 70,\n}, {\n  x: 10,\n  y: 35,\n  size: 75,\n  durationShift: 90,\n}, {\n  x: 20,\n  y: 70,\n  size: 125,\n  durationShift: 30,\n}, {\n  x: 40,\n  y: 10,\n  size: 125,\n  durationShift: 0,\n}, {\n  x: 45,\n  y: 60,\n  size: 75,\n  durationShift: 60,\n}, {\n  x: 60,\n  y: -10,\n  size: 100,\n  durationShift: 20,\n}, {\n  x: 55,\n  y: 40,\n  size: 75,\n  durationShift: 60,\n}, {\n  x: 70,\n  y: 65,\n  size: 100,\n  durationShift: 90,\n}, {\n  x: 80,\n  y: 10,\n  size: 75,\n  durationShift: 30,\n}, {\n  x: 80,\n  y: 45,\n  size: 125,\n  durationShift: 0,\n}];\nconst PROGRESS_POSITIONS = generateRandomProgressPositions(100);\n\nconst Sparkles = ({\n  className,\n  ...presetSettings\n}: OwnProps) => {\n  if (presetSettings.preset === 'reaction') {\n    return (\n      <div className={buildClassName(styles.root, styles.reaction, className)}>\n        {REACTION_POSITIONS.map((position) => {\n          const shiftX = Math.cos(Math.atan2(-50 + position.y, -50 + position.x)) * 100;\n          const shiftY = Math.sin(Math.atan2(-50 + position.y, -50 + position.x)) * 100;\n          return (\n            <div\n              className={styles.symbol}\n              style={buildStyle(\n                `top: ${position.y}%`,\n                `left: ${position.x}%`,\n                `--_duration-shift: ${(-position.durationShift / 100) * ANIMATION_DURATION}s`,\n                `--_shift-x: ${shiftX}%`,\n                `--_shift-y: ${shiftY}%`,\n                `scale: ${position.size}%`,\n              )}\n            >\n              {SYMBOL}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  if (presetSettings.preset === 'progress') {\n    return (\n      <div className={buildClassName(styles.root, styles.progress, className)}>\n        {PROGRESS_POSITIONS.map((position) => {\n          return (\n            <div\n              className={styles.symbol}\n              style={buildStyle(\n                `top: ${position.y}%`,\n                `left: ${position.x}%`,\n                `--_shift-x: ${position.velocityX}%`,\n                `--_shift-y: ${position.velocityY}%`,\n                `scale: ${position.scale}%`,\n                `--_duration-shift: ${(-position.durationShift / 100) * ANIMATION_DURATION}s`,\n              )}\n            >\n              {SYMBOL}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  return undefined;\n};\n\nfunction generateRandomProgressPositions(count: number) {\n  const positions = [];\n  for (let i = 0; i < count; i++) {\n    positions.push({\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      velocityX: (Math.random() * 5 + 15) * 100,\n      velocityY: (Math.random() * 10 - 5) * 100,\n      scale: (Math.random() * 0.5 + 0.5) * 100,\n      durationShift: Math.random() * 100,\n    });\n  }\n  return positions;\n}\n\nexport default memo(Sparkles);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal, { type OwnProps as ModalProps } from '../../ui/Modal';\n\nimport styles from './PickerModal.module.scss';\n\ntype OwnProps = {\n  confirmButtonText?: string;\n  isConfirmDisabled?: boolean;\n  shouldAdaptToSearch?: boolean;\n  withFixedHeight?: boolean;\n  withPremiumGradient?: boolean;\n  onConfirm?: NoneToVoidFunction;\n} & ModalProps;\n\nconst PickerModal = ({\n  confirmButtonText,\n  isConfirmDisabled,\n  shouldAdaptToSearch,\n  withFixedHeight,\n  onConfirm,\n  withPremiumGradient,\n  ...modalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hasOnClickHandler = Boolean(onConfirm || modalProps.onClose);\n\n  return (\n    <Modal\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...modalProps}\n      isSlim\n      className={buildClassName(\n        shouldAdaptToSearch && styles.withSearch,\n        withFixedHeight && styles.fixedHeight,\n        modalProps.className,\n      )}\n      contentClassName={buildClassName(styles.content, modalProps.contentClassName)}\n      headerClassName={buildClassName(styles.header, modalProps.headerClassName)}\n    >\n      {modalProps.children}\n      {hasOnClickHandler && (\n        <div className={styles.buttonWrapper}>\n          <Button\n            withPremiumGradient={withPremiumGradient}\n            onClick={onConfirm || modalProps.onClose}\n            color=\"primary\"\n            size=\"smaller\"\n            disabled={isConfirmDisabled}\n          >\n            {confirmButtonText || lang('Confirm')}\n          </Button>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(PickerModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"FuFYE0AA\",\"fixedHeight\":\"CrEsDylb\",\"withSearch\":\"WGSZ8u75\",\"header\":\"iEptOmIp\",\"buttonWrapper\":\"HqeDTaSr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"KYHkJ9Qf\",\"title\":\"AwnUe4Qk\",\"value\":\"JGH6P9Az\",\"table\":\"DFRB0Ad4\",\"cell\":\"Cnh5ENvm\",\"avatar\":\"SHQbPR5Y\",\"chatItem\":\"aS9U4hiQ\"};","import React, { memo, type TeactNode } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './TableInfoModal.module.scss';\n\ntype ChatItem = { chatId: string };\n\nexport type TableData = [TeactNode, TeactNode | ChatItem][];\n\ntype OwnProps = {\n  isOpen?: boolean;\n  title?: string;\n  tableData?: TableData;\n  headerAvatarPeer?: ApiPeer | CustomPeer;\n  header?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  className?: string;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n};\n\nconst TableInfoModal = ({\n  isOpen,\n  title,\n  tableData,\n  headerAvatarPeer,\n  header,\n  footer,\n  buttonText,\n  className,\n  onClose,\n  onButtonClick,\n}: OwnProps) => {\n  const { openChat } = getActions();\n  const handleOpenChat = useLastCallback((peerId: string) => {\n    openChat({ id: peerId });\n    onClose();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton={Boolean(title)}\n      hasAbsoluteCloseButton={!title}\n      isSlim\n      title={title}\n      className={className}\n      contentClassName={styles.content}\n      onClose={onClose}\n    >\n      {headerAvatarPeer && (\n        <Avatar peer={headerAvatarPeer} size=\"jumbo\" className={styles.avatar} />\n      )}\n      {header}\n      <div className={styles.table}>\n        {tableData?.map(([label, value]) => (\n          <>\n            <div className={buildClassName(styles.cell, styles.title)}>{label}</div>\n            <div className={buildClassName(styles.cell, styles.value)}>\n              {typeof value === 'object' && 'chatId' in value ? (\n                <PickerSelectedItem\n                  peerId={value.chatId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  fluid\n                  clickArg={value.chatId}\n                  onClick={handleOpenChat}\n                />\n              ) : value}\n            </div>\n          </>\n        ))}\n      </div>\n      {footer}\n      {buttonText && (\n        <Button size=\"smaller\" onClick={onButtonClick || onClose}>{buttonText}</Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableInfoModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"options\":\"OnCj9kef\",\"option\":\"tpTHQAUF\",\"active\":\"U_9MXPG5\",\"wideOption\":\"dJcJl33b\",\"optionTop\":\"x9G4lqMf\",\"stackedStars\":\"etXLebjM\",\"stackedStar\":\"swttXv9P\",\"optionBottom\":\"tK7La7L2\",\"moreOptions\":\"AWXBaWLW\",\"iconDown\":\"zWYHZJmd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\n\nimport type { ApiStarGiveawayOption, ApiStarTopupOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './StarTopupOptionList.module.scss';\n\nconst MAX_STARS_COUNT = 6;\n\ntype OwnProps = {\n  isActive?: boolean;\n  options?: ApiStarTopupOption[] | ApiStarGiveawayOption[];\n  selectedStarOption?: ApiStarTopupOption | ApiStarGiveawayOption;\n  selectedStarCount?: number;\n  starsNeeded?: number;\n  className?: string;\n  onClick: (option: ApiStarTopupOption | ApiStarGiveawayOption) => void;\n};\n\nconst StarTopupOptionList: FC<OwnProps> = ({\n  isActive,\n  className,\n  options,\n  selectedStarOption,\n  selectedStarCount,\n  starsNeeded,\n  onClick,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [areOptionsExtended, markOptionsExtended, unmarkOptionsExtended] = useFlag();\n\n  useEffect(() => {\n    if (!isActive) {\n      unmarkOptionsExtended();\n    }\n  }, [isActive]);\n\n  const [renderingOptions, canExtend] = useMemo(() => {\n    if (!options) return [undefined, false];\n\n    const maxOption = options.reduce((max, option) => (\n      max.stars > option.stars ? max : option\n    ));\n    const forceShowAll = starsNeeded && maxOption.stars < starsNeeded;\n\n    const result: { option: ApiStarTopupOption | ApiStarGiveawayOption; starsCount: number; isWide: boolean }[] = [];\n    let currentStackedStarsCount = 0;\n    let canExtendOptions = false;\n    options.forEach((option, index) => {\n      if (!option.isExtended) currentStackedStarsCount++;\n\n      if (starsNeeded && !forceShowAll && option.stars < starsNeeded) return;\n      if (!areOptionsExtended && option.isExtended) {\n        canExtendOptions = true;\n        return;\n      }\n      result.push({\n        option,\n        starsCount: Math.min(currentStackedStarsCount, MAX_STARS_COUNT),\n        isWide: index === options.length - 1,\n      });\n    });\n\n    return [result, canExtendOptions];\n  }, [areOptionsExtended, options, starsNeeded]);\n\n  return (\n    <div className={buildClassName(styles.options, className)}>\n      {renderingOptions?.map(({ option, starsCount, isWide }) => {\n        const length = renderingOptions?.length;\n        const isOdd = length % 2 === 0;\n        const isActiveOption = option === selectedStarOption;\n\n        let perUserStarCount;\n        if (option && 'winners' in option) {\n          const winner = option.winners.find((opt) => opt.users === selectedStarCount)\n            || option.winners.reduce((max, opt) => (opt.users > max.users ? opt : max), option.winners[0]);\n          perUserStarCount = winner?.perUserStars;\n        }\n\n        return (\n          <div\n            className={buildClassName(\n              styles.option, (!isOdd && isWide) && styles.wideOption, isActiveOption && styles.active,\n            )}\n            key={option.stars}\n            onClick={() => onClick?.(option)}\n          >\n            <div className={styles.optionTop}>\n              +{formatInteger(option.stars)}\n              <div className={styles.stackedStars} dir={lang.isRtl ? 'ltr' : 'rtl'}>\n                {Array.from({ length: starsCount }).map(() => (\n                  <StarIcon className={styles.stackedStar} type=\"gold\" size=\"big\" />\n                ))}\n              </div>\n            </div>\n            <div className={styles.optionBottom}>\n              {formatCurrency(option.amount, option.currency, oldLang.code)}\n            </div>\n            {(isActiveOption || (selectedStarOption && 'winners' in selectedStarOption)) && perUserStarCount && (\n              <div className={styles.optionBottom}>\n                <div className={styles.perUserStars}>\n                  {renderText(oldLang('BoostGift.Stars.PerUser', formatInteger(perUserStarCount)))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n      {!areOptionsExtended && canExtend && (\n        <Button className={styles.moreOptions} isText noForcedUpperCase onClick={markOptionsExtended}>\n          {oldLang('Stars.Purchase.ShowMore')}\n          <Icon className={styles.iconDown} name=\"down\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StarTopupOptionList);\n","import type {\n  ApiInputInvoice,\n  ApiMessage,\n  ApiRequestInputInvoice,\n  ApiStarsTransaction,\n  ApiStarsTransactionPeer,\n  ApiStarsTransactionPeerPeer,\n} from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { GlobalState } from '../types';\n\nimport { formatInteger } from '../../util/textFormat';\nimport { selectChat, selectUser } from '../selectors';\n\nexport function getRequestInputInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice,\n): ApiRequestInputInvoice | undefined {\n  if (inputInvoice.type === 'slug') return inputInvoice;\n\n  if (inputInvoice.type === 'starsgift') {\n    const {\n      userId, stars, amount, currency,\n    } = inputInvoice;\n    const user = selectUser(global, userId);\n\n    if (!user) return undefined;\n\n    return {\n      type: 'stars',\n      purpose: {\n        type: 'starsgift',\n        user,\n        stars,\n        amount,\n        currency,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'stars') {\n    const {\n      stars, amount, currency,\n    } = inputInvoice;\n\n    return {\n      type: 'stars',\n      purpose: {\n        type: 'stars',\n        stars,\n        amount,\n        currency,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'chatInviteSubscription') {\n    const { hash } = inputInvoice;\n\n    return {\n      type: 'chatInviteSubscription',\n      hash,\n    };\n  }\n\n  if (inputInvoice.type === 'message') {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return undefined;\n    }\n    return {\n      type: 'message',\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  if (inputInvoice.type === 'giftcode') {\n    const {\n      userIds, boostChannelId, amount, currency, option,\n    } = inputInvoice;\n    const users = userIds.map((id) => selectUser(global, id)).filter(Boolean);\n    const boostChannel = boostChannelId ? selectChat(global, boostChannelId) : undefined;\n\n    return {\n      type: 'giveaway',\n      option,\n      purpose: {\n        type: 'giftcode',\n        amount,\n        currency,\n        users,\n        boostChannel,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'starsgiveaway') {\n    const {\n      chatId, additionalChannelIds, amount, currency, untilDate, areWinnersVisible, countries,\n      isOnlyForNewSubscribers, prizeDescription, stars, users,\n    } = inputInvoice;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return undefined;\n    }\n    const additionalChannels = additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n    return {\n      type: 'starsgiveaway',\n      purpose: {\n        type: 'starsgiveaway',\n        amount,\n        currency,\n        chat,\n        additionalChannels,\n        untilDate,\n        areWinnersVisible,\n        countries,\n        isOnlyForNewSubscribers,\n        prizeDescription,\n        stars,\n        users,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'giveaway') {\n    const {\n      chatId, additionalChannelIds, amount, currency, option, untilDate, areWinnersVisible, countries,\n      isOnlyForNewSubscribers, prizeDescription,\n    } = inputInvoice;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return undefined;\n    }\n    const additionalChannels = additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n    return {\n      type: 'giveaway',\n      option,\n      purpose: {\n        type: 'giveaway',\n        amount,\n        currency,\n        chat,\n        additionalChannels,\n        untilDate,\n        areWinnersVisible,\n        countries,\n        isOnlyForNewSubscribers,\n        prizeDescription,\n      },\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildStarsTransactionCustomPeer(\n  peer: Exclude<ApiStarsTransactionPeer, ApiStarsTransactionPeerPeer>,\n): CustomPeer {\n  if (peer.type === 'appStore') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.AppleTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.AppleTopUp.Subtitle',\n      peerColorId: 5,\n    };\n  }\n\n  if (peer.type === 'playMarket') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.GoogleTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.GoogleTopUp.Subtitle',\n      peerColorId: 3,\n    };\n  }\n\n  if (peer.type === 'fragment') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.FragmentTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.FragmentTopUp.Subtitle',\n      customPeerAvatarColor: '#000000',\n    };\n  }\n\n  if (peer.type === 'premiumBot') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.PremiumBotTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.PremiumBotTopUp.Subtitle',\n      peerColorId: 1,\n      withPremiumGradient: true,\n    };\n  }\n\n  if (peer.type === 'ads') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.TelegramAds.Title',\n      subtitleKey: 'Stars.Intro.Transaction.TelegramAds.Subtitle',\n      peerColorId: 2,\n    };\n  }\n\n  return {\n    avatarIcon: 'star',\n    isCustomPeer: true,\n    titleKey: 'Stars.Intro.Transaction.Unsupported.Title',\n    subtitleKey: 'Stars.Intro.Transaction.Unsupported.Title',\n    peerColorId: 0,\n  };\n}\n\nexport function formatStarsTransactionAmount(amount: number) {\n  if (amount < 0) {\n    return `- ${formatInteger(Math.abs(amount))}`;\n  }\n\n  return `+ ${formatInteger(amount)}`;\n}\n\nexport function getStarsTransactionFromGift(message: ApiMessage): ApiStarsTransaction | undefined {\n  const { action } = message.content;\n\n  if (action?.type !== 'giftStars') return undefined;\n\n  const { transactionId, stars } = action;\n\n  return {\n    id: transactionId!,\n    stars: stars!,\n    peer: {\n      type: 'peer',\n      id: message.isOutgoing ? message.chatId : (message.senderId || message.chatId),\n    },\n    date: message.date,\n    isGift: true,\n    isMyGift: message.isOutgoing || undefined,\n  };\n}\n\nexport function getPrizeStarsTransactionFromGiveaway(message: ApiMessage): ApiStarsTransaction | undefined {\n  const { action } = message.content;\n\n  if (action?.type !== 'prizeStars') return undefined;\n\n  const { transactionId, stars, targetChatId } = action;\n\n  return {\n    id: transactionId!,\n    stars: stars!,\n    peer: {\n      type: 'peer',\n      id: targetChatId!,\n    },\n    date: message.date,\n    isPrizeStars: true,\n  };\n}\n","import type { UniqueCustomPeer } from '../../types';\n\nexport const CUSTOM_PEER_PREMIUM: UniqueCustomPeer = {\n  isCustomPeer: true,\n  type: 'premium',\n  titleKey: 'PrivacyPremium',\n  subtitleKey: 'PrivacyPremiumText',\n  avatarIcon: 'star',\n  isAvatarSquare: true,\n  withPremiumGradient: true,\n};\n\nexport const CUSTOM_PEER_INCLUDED_CHAT_TYPES: UniqueCustomPeer[] = [\n  {\n    isCustomPeer: true,\n    type: 'contacts',\n    titleKey: 'FilterContacts',\n    avatarIcon: 'user',\n    isAvatarSquare: true,\n    peerColorId: 5,\n  },\n  {\n    isCustomPeer: true,\n    type: 'nonContacts',\n    titleKey: 'FilterNonContacts',\n    avatarIcon: 'non-contacts',\n    isAvatarSquare: true,\n    peerColorId: 4,\n  },\n  {\n    isCustomPeer: true,\n    type: 'groups',\n    titleKey: 'FilterGroups',\n    avatarIcon: 'group',\n    isAvatarSquare: true,\n    peerColorId: 3,\n  },\n  {\n    isCustomPeer: true,\n    type: 'channels',\n    titleKey: 'FilterChannels',\n    avatarIcon: 'channel',\n    isAvatarSquare: true,\n    peerColorId: 1,\n  },\n  {\n    isCustomPeer: true,\n    type: 'bots',\n    titleKey: 'FilterBots',\n    avatarIcon: 'bots',\n    isAvatarSquare: true,\n    peerColorId: 6,\n  },\n];\n\nexport const CUSTOM_PEER_EXCLUDED_CHAT_TYPES: UniqueCustomPeer[] = [\n  {\n    isCustomPeer: true,\n    type: 'excludeMuted',\n    titleKey: 'FilterMuted',\n    avatarIcon: 'mute',\n    isAvatarSquare: true,\n    peerColorId: 6,\n  },\n  {\n    isCustomPeer: true,\n    type: 'excludeRead',\n    titleKey: 'FilterRead',\n    avatarIcon: 'readchats',\n    isAvatarSquare: true,\n    peerColorId: 4,\n  },\n  {\n    isCustomPeer: true,\n    type: 'excludeArchived',\n    titleKey: 'FilterArchived',\n    avatarIcon: 'archive',\n    isAvatarSquare: true,\n    peerColorId: 5,\n  },\n];\n"],"names":["memo","withGlobal","global","starsGiftOptions","forUserId","isCompleted","selectTabState","starsGiftModal","user","selectUser","getGlobal","undefined","_ref","isOpen","dialogRef","useRef","closeStarsGiftModal","openInvoice","requestConfetti","getActions","oldLang","useOldLang","selectedOption","setSelectedOption","useState","isHeaderHidden","setHeaderHidden","useEffect","showConfetti","useLastCallback","dialog","current","top","left","width","height","querySelector","getBoundingClientRect","withStars","handleClick","option","type","userId","stars","currency","amount","handleClose","bottomText","useMemo","parts","split","React","createElement","SafeLink","url","text","Modal","className","buildClassName","styles","modalDialog","root","onClose","main","onScroll","e","scrollTop","currentTarget","Button","round","size","closeButton","color","onClick","ariaLabel","header","hiddenHeader","starHeaderText","headerInfo","Fragment","Avatar","peer","avatar","logoBackground","src","StarsBackground","alt","draggable","logo","StarLogo","headerText","center","renderText","formatCurrencyAsString","code","description","getSenderTitle","section","StarTopupOptionList","options","secondaryInfo","chats","listIds","currentUserId","userIds","contactList","activeListIds","active","archivedListIds","archived","closeStarsGiftingModal","openStarsGiftModal","searchQuery","setSearchQuery","displayedUserIds","usersById","users","byId","combinedIds","filteredContactIds","filterUsersByName","sortChatIds","unique","filter","id","isSupport","isUserBot","isDeletedUser","SERVICE_NOTIFICATIONS_USER_ID","handleSelectedUserIdsChange","newSelectedId","length","PickerModal","title","hasCloseButton","shouldAdaptToSearch","withFixedHeight","confirmButtonText","onEnter","PeerPicker","itemIds","filterValue","filterPlaceholder","onFilterChange","isSearchable","withDefaultPadding","withStatus","onSelectedIdChange","balance","lang","smallerText","balanceBottom","StarIcon","formatInteger","subscription","openStarsSubscriptionModal","peerId","pricing","until","isCancelled","useSelector","selectPeer","selectProvidedPeer","hasExpired","Date","now","formattedDate","formatDateToString","preview","subscriptionStar","info","status","statusEnded","statusPricing","star","statusPeriod","SingleMediaThumb","_ref2","boughtMedia","index","media","video","photo","mediaHash","getMediaHash","thumb","getMediaThumbUri","mediaBlob","useMedia","blurry","full","isTransactionPreview","count","Math","min","isLocked","dir","slice","reverse","map","item","i","arr","realIndex","MediaSpoiler","isVisible","thumbDataUri","thumbnail","dataUri","noOutline","Icon","name","transaction","openStarsTransactionModal","date","transactionPeer","extendedMedia","subscriptionPeriod","selectOptionalPeer","data","avatarPeer","isReaction","CUSTOM_PEER_PREMIUM","customPeer","buildStarsTransactionCustomPeer","titleKey","subtitleKey","isRefund","hasFailed","isPending","PaidMediaThumb","webPhoto","Boolean","formatDateTimeToString","negative","positive","formatStarsTransactionAmount","TRANSACTION_TYPES","TRANSACTION_TABS","TRANSACTION_ITEM_CLASS","starsBalanceState","canBuyPremium","selectIsPremiumPurchaseBlocked","modal","closeStarsBalanceModal","loadStarsTransactions","openStarsGiftingModal","history","subscriptions","useLang","selectedTabIndex","setSelectedTabIndex","areBuyOptionsShown","showBuyOptions","hideBuyOptions","useFlag","originPayment","originReaction","ongoingTransactionAmount","invoice","starsNeeded","starsNeededText","channel","selectChat","chatId","getChatTitle","bot","botId","getUserFullName","shouldShowItems","all","transactions","shouldSuggestGifting","tosText","handleLoadMoreTransactions","openStarsGiftingModalHandler","handleBuyStars","BalanceBlock","modalBalance","starButton","topupOptions","list","sectionTitle","StarsSubscriptionItem","key","container","Transition","isRtl","activeKey","renderCount","shouldRestoreHeight","transition","InfiniteScroll","onLoadMore","items","scrollContainerClosest","itemSelector","noFastList","StarsTransactionItem","TabList","tabs","tabClassName","tab","activeTab","onSwitchTab","payment","messageInputInvoice","inputInvoice","message","selectChatMessage","messageId","chat","isPaidMedia","content","paidMedia","inviteInputInvoice","inviteInfo","paidMediaMessage","paidMediaChat","closePaymentModal","openStarsBalanceModal","sendStarPaymentForm","isLoading","markLoading","unmarkLoading","descriptionText","botName","starsText","areAllPhotos","every","duration","areAllVideos","mediaText","channelTitle","withNodes","withMarkdown","pluralValue","disclaimerText","link","inviteCustomPeer","getCustomPeerFromInvite","handlePayment","price","contentClassName","paymentContent","hasAbsoluteCloseButton","isSlim","paymentImages","paymentPhoto","avatarStar","paymentImageBackground","paymentButton","paymentAmount","paymentButtonStar","disclaimer","starCount","starGiftSticker","selectGiftStickerForStars","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","showNotification","openMediaViewer","closeStarsTransactionModal","handleOpenMedia","origin","MediaViewerOrigin","StarsTransaction","standaloneMedia","flatMap","Object","values","giftEntryAboutText","subtitleTextParts","giftOutAboutText","starModalData","isGift","isPrizeStars","toName","getStarsPeerTitleKey","messageLink","getMessageLink","mediaAmount","m","shouldDisplayAvatar","AnimatedIconFromSticker","sticker","play","noLoop","nonInteractive","isMyGift","tableData","push","copyTextToClipboard","footerTextParts","footer","renderingModalData","usePrevious","TableInfoModal","buttonText","closeStarsSubscriptionModal","fulfillStarsSubscription","changeStarsSubscription","checkChatInvite","loadStarStatus","buttonState","canRefulfill","isActive","handleButtonClick","hash","chatInviteHash","specialReplacement","footerTos","isText","DEFAULT_POINTS","getProgress","points","value","pointIndex","findIndex","point","prevPoint","nextPoint","getValue","progress","floor","maxValue","defaultValue","onChange","floatingBadgeRef","result","setValue","useEffectOnce","updateSafeBadgePosition","badge","parent","parentElement","requestMeasure","safeMinX","offsetLeft","offsetWidth","safeMaxX","requestMutation","style","setProperty","useResizeObserver","handleChange","event","newValue","Number","floatingBadgeWrapper","floatingBadge","ref","floatingBadgeText","floatingBadgeIcon","AnimatedCounter","floatingBadgeTriangle","viewBox","fill","x1","x2","y1","y2","offset","d","Sparkles","preset","sparkles","slider","max","step","ANONYMOUS_PEER","avatarIcon","customPeerAvatarColor","isCustomPeer","starBalance","maxAmount","appConfig","paidReactionMaxAmount","defaultPrivacy","settings","paidReactionPrivacy","closePaidReactionModal","addLocalPaidReaction","starsAmount","setStarsAmount","isTouched","markTouched","unmarkTouched","shouldShowUp","setShouldShowUp","handleAnonimityChange","target","checked","handleAmountChange","currentReactor","reactions","topReactors","find","reactor","isMe","isAnonymous","handleSend","isPrivate","hasMe","forEach","localAmount","me","sort","a","b","chatTitle","StarSlider","Separator","countText","PeerBadge","badgeText","badgeIcon","badgeClassName","Checkbox","label","clickable","REACTION_POSITIONS","x","y","durationShift","PROGRESS_POSITIONS","positions","random","velocityX","velocityY","scale","generateRandomProgressPositions","presetSettings","position","shiftX","cos","atan2","shiftY","sin","buildStyle","isConfirmDisabled","onConfirm","withPremiumGradient","modalProps","hasOnClickHandler","_extends","headerClassName","children","disabled","headerAvatarPeer","onButtonClick","openChat","handleOpenChat","PickerSelectedItem","forceShowSelf","fluid","clickArg","selectedStarOption","selectedStarCount","areOptionsExtended","markOptionsExtended","unmarkOptionsExtended","renderingOptions","canExtend","maxOption","reduce","forceShowAll","currentStackedStarsCount","canExtendOptions","isExtended","starsCount","isWide","isOdd","isActiveOption","perUserStarCount","winner","winners","opt","perUserStars","wideOption","optionTop","stackedStars","Array","from","stackedStar","optionBottom","formatCurrency","moreOptions","noForcedUpperCase","iconDown","getRequestInputInvoice","purpose","boostChannelId","boostChannel","additionalChannelIds","untilDate","areWinnersVisible","countries","isOnlyForNewSubscribers","prizeDescription","additionalChannels","peerColorId","abs","getStarsTransactionFromGift","action","transactionId","isOutgoing","senderId","getPrizeStarsTransactionFromGiveaway","targetChatId","isAvatarSquare","CUSTOM_PEER_INCLUDED_CHAT_TYPES","CUSTOM_PEER_EXCLUDED_CHAT_TYPES"],"sourceRoot":""}